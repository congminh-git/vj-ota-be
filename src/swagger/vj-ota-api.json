{
  "openapi": "3.0.0",
  "info": {
    "version": "v1",
    "title": "VietJet API GATEWAY",
    "description": "VietJet API GATEWAY",
    "termsOfService": "None",
    "contact": {
      "name": "VietJet API GATEWAY"
    },
    "license": {
      "name": "All right reserved"
    }
  },
  "servers": [
    {
      "url": "https://34.144.235.95.nip.io/flight"
    }
  ],
  "paths": {
    "/agencies": {
      "get": {
        "tags": ["Agencies"],
        "summary": "Get all agencies",
        "operationId": "ApiAgenciesGet",
        "parameters": [],
        "security": [
          {
            "bearerAuth": [],
            "api-key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgencyModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/airports": {
      "get": {
        "tags": ["Airports"],
        "summary": "Retrieve listing of airports.",
        "operationId": "ApiAirportsGet",
        "parameters": [
          {
            "name": "applicabilityDescriptor",
            "in": "query",
            "description": "Optional applicability values: All or Reservation. Ignored under certain authentication conditions if provided.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "All"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Optional inclusion of inactive airports. Ignored under certain authentication conditions if provided.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AirportModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ancillaryOptions": {
      "get": {
        "tags": ["AncillaryOptions"],
        "summary": "Retrieve ancillary options for the provided criteria. Each ancillary option includes a purchase key which is to be retained for the booking process.",
        "operationId": "ApiAncillaryOptionsGet",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "query",
            "description": "The key value identifying a fare option under a specific travel option / passenger journey detail.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "in": "query",
            "description": "(Optional) ISO_639-1 (2 letter code) language code.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AncillaryOptionsModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/cabinClasses": {
      "get": {
        "tags": ["CabinClasses"],
        "summary": "Retrieve listing of cabin classes. Also known as class of service or level of service.",
        "operationId": "ApiCabinClassesGet",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CabinClassModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/cityPairs": {
      "get": {
        "tags": ["CityPairs"],
        "summary": "Retrieve listing of valid origin and destination airport city pairs.",
        "operationId": "ApiCityPairsGet",
        "parameters": [
          {
            "name": "includeExpired",
            "in": "query",
            "description": "Optional inclusion of expired city pairs, fares and charges.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeLapsed",
            "in": "query",
            "description": "Optional inclusion of lapsed city pairs, fares and charges.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "airportApplicabilityDescriptor",
            "in": "query",
            "description": "Optional airport applicability values: All or Reservation. Ignored under certain authentication conditions if provided.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "All"
            }
          },
          {
            "name": "includeInactiveAirports",
            "in": "query",
            "description": "Optional inclusion of city pairs with inactive airports.Ignored under certain authentication conditions if provided.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CityPairModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/companies": {
      "get": {
        "tags": ["Companies"],
        "summary": "Get all companies",
        "operationId": "ApiCompaniesGet",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/countries": {
      "get": {
        "tags": ["Countries"],
        "summary": "Retrieve a list of all countries.",
        "operationId": "ApiCountriesGet",
        "parameters": [
          {
            "name": "includeProvinces",
            "in": "query",
            "description": "Optional inclusion of provinces.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/countries/{code}/provinces": {
      "get": {
        "tags": ["Countries"],
        "summary": "Retrieve a list of provinces in a specific country.",
        "operationId": "ApiCountriesByCodeProvincesGet",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/currencies": {
      "get": {
        "tags": ["Currencies"],
        "summary": "Retrieve listing of currencies.",
        "operationId": "ApiCurrenciesGet",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurrencyModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/insurancePolicyOptions": {
      "put": {
        "tags": ["InsurancePolicyOptions"],
        "operationId": "ApiInsurancePolicyOptionsPut",
        "parameters": [
          {
            "name": "httpMethod",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "default": "POST"
            }
          },
          {
            "name": "requestUri",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "default": "reservations"
            }
          },
          {
            "name": "languageCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InsurancePolicyRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationInsurancePolicyModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/paymentMethods": {
      "get": {
        "tags": ["PaymentMethods"],
        "summary": "Retrieve a listing of payment methods",
        "operationId": "ApiPaymentMethodsGet",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethodModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/seatSelectionOptions": {
      "get": {
        "tags": ["SeatSelectionOptions"],
        "summary": "Retrieve seat selection options for the provided criteria. Each seat option includes a selection key which is to be retained for the booking process.",
        "operationId": "ApiSeatSelectionOptionsGet",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "query",
            "description": "The key value identifying a fare option under a specific travel option / passenger journey detail.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SeatSelectionOptionModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lowFareOptions": {
      "get": {
        "tags": ["TravelOptions"],
        "summary": "Retrieve the lowest fare options for the provided criteria. Use the optional daysBefore/daysAfter or earliest/latest groups of parameters to return options for a date range up to a maximum of 31 days.",
        "operationId": "ApiLowFareOptionsGet",
        "parameters": [
          {
            "name": "cityPair",
            "in": "query",
            "description": "The origin and destination airport city pair.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departure",
            "in": "query",
            "description": "The date of departure.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cabinClass",
            "in": "query",
            "description": "The cabin class code being requested. Also known as class of service or level of service.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "The currency code for the currency amounts returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adultCount",
            "in": "query",
            "description": "The number of adult passengers expected to reserve. 0 or above.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "childCount",
            "in": "query",
            "description": "The number of child passengers expected to reserve. 0 or above.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "infantCount",
            "in": "query",
            "description": "The number of infant passengers expected to reserve. 0 or above.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysBeforeDeparture",
            "in": "query",
            "description": "Optional number of days to include prior to chosen date of departure.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysAfterDeparture",
            "in": "query",
            "description": "Optional number of days to include following the chosen date of departure.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "earliestDeparture",
            "in": "query",
            "description": "Optional earliest date of departure. An alternative to daysBeforeDeparture.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "latestDeparture",
            "in": "query",
            "description": "Optional latest date of departure. An alternative to daysAfterDeparture.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "return",
            "in": "query",
            "description": "Optional date of return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "daysBeforeReturn",
            "in": "query",
            "description": "Optional number of days to include prior to chosen date of return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysAfterReturn",
            "in": "query",
            "description": "Optional number of days to include following the chosen date of return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "earliestReturn",
            "in": "query",
            "description": "Optional earliest date of return. An alternative to daysBeforeReturn.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "latestReturn",
            "in": "query",
            "description": "Optional latest date of return. An alternative to daysAfterReturn.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "promoCode",
            "in": "query",
            "description": "Optional promotion code to be validated and applied during fare retrieval.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "company",
            "in": "query",
            "description": "Optional company key to be validated and applied during fare retrieval. Ignored if not authorized.",
            "required": true,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "standby",
            "in": "query",
            "description": "Optional standby booking fare options.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TravelOptionModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/travelOptions": {
      "get": {
        "tags": ["TravelOptions"],
        "summary": "Retrieve travel options for the provided criteria. Use the optional daysBefore/daysAfter or earliest/latest groups of parameters to return options for a date range up to a maximum of 31 days. Each fare option includes a booking key which is to be retained for the booking process.",
        "operationId": "ApiTravelOptionsGet",
        "parameters": [
          {
            "name": "cityPair",
            "in": "query",
            "description": "The origin and destination airport city pair.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departure",
            "in": "query",
            "description": "The date of departure.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cabinClass",
            "in": "query",
            "description": "The cabin class code being requested. Also known as class of service or level of service.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "The currency code for the currency amounts returned.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adultCount",
            "in": "query",
            "description": "The number of adult passengers expected to reserve. 0 or above.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "childCount",
            "in": "query",
            "description": "The number of child passengers expected to reserve. 0 or above.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "infantCount",
            "in": "query",
            "description": "The number of infant passengers expected to reserve. 0 or above.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "daysBeforeDeparture",
            "in": "query",
            "description": "Optional number of days to include prior to chosen date of departure.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysAfterDeparture",
            "in": "query",
            "description": "Optional number of days to include following the chosen date of departure.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "earliestDeparture",
            "in": "query",
            "description": "Optional earliest date of departure. An alternative to daysBeforeDeparture.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "latestDeparture",
            "in": "query",
            "description": "Optional latest date of departure. An alternative to daysAfterDeparture.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "return",
            "in": "query",
            "description": "Optional date of return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "daysBeforeReturn",
            "in": "query",
            "description": "Optional number of days to include prior to chosen date of return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysAfterReturn",
            "in": "query",
            "description": "Optional number of days to include following the chosen date of return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "earliestReturn",
            "in": "query",
            "description": "Optional earliest date of return. An alternative to daysBeforeReturn.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "latestReturn",
            "in": "query",
            "description": "Optional latest date of return. An alternative to daysAfterReturn.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "promoCode",
            "in": "query",
            "description": "Optional promotion code to be validated and applied during fare retrieval.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "company",
            "in": "query",
            "description": "Optional company key to be validated and applied during fare retrieval. Ignored if not authorized.",
            "required": true,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "standby",
            "in": "query",
            "description": "Optional standby booking fare options.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "reservation",
            "in": "query",
            "description": "The access key for a reservation.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "journey",
            "in": "query",
            "description": "The key value for a reservation journey. Leave blank for a new journey.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TravelOptionModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/travelOptions/{key}": {
      "get": {
        "tags": ["TravelOptions"],
        "summary": "Retrieve the travel option for the provided key.",
        "operationId": "ApiTravelOptionsByKeyGet",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "description": "The unique key for identifying the travel option",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TravelOptionModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reservations": {
      "get": {
        "tags": ["Reservations"],
        "summary": "Search reservations for the provided criteria. Use the optional earliest/latest groups of parameters to return options for a date range up to a maximum of 31 days. At least one parameter must be provided not including partialMatch.",
        "operationId": "ApiReservationsGet",
        "parameters": [
          {
            "name": "reservationNumber",
            "in": "query",
            "description": "Optional number which identifies a reservation.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "reservationLocator",
            "in": "query",
            "description": "Optional locator which identifies or is associated to a reservation.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "earliestBooking",
            "in": "query",
            "description": "Optional earliest date of booking.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "latestBooking",
            "in": "query",
            "description": "Optional latest date of booking.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "departureAirport",
            "in": "query",
            "description": "Optional departure airport code.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "earliestDeparture",
            "in": "query",
            "description": "Optional earliest date of departure.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "latestDeparture",
            "in": "query",
            "description": "Optional latest date of departure.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "passengerLastName",
            "in": "query",
            "description": "Optional last name of a reserved passenger.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "passengerFirstName",
            "in": "query",
            "description": "Optional first name of a reserved passenger.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "partialMatch",
            "in": "query",
            "description": "Optional partial matching of search parameters.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": ["Reservations"],
        "summary": "Add the provided reservation or split an existing reservation.",
        "operationId": "ApiReservationsPost",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "1000": {
                      "type": "string",
                      "example": "Credit Card processing issue."
                    },
                    "Deserialization Failed": {
                      "type": "string",
                      "example": "Happens when Request is not properly formatted (i.e. missing or misspelled elements"
                    },
                    "An error occurred when verifying security for the message": {
                      "type": "string",
                      "example": "Occurs when request is missing required element"
                    },
                    "ContractFilter mismatch at the EndpointDispatcher": {
                      "type": "string",
                      "example": "Can manifest because of a variety of different reasons, usually occurs when the endpoint URL is invalid"
                    },
                    "The booking request failed. The reservation was not created successfully": {
                      "type": "string",
                      "example": "Occurs when trying to book a reservation with credit card payment type if processing fees are applicable but not provided in the request"
                    },
                    "-91": {
                      "type": "string",
                      "example": "Object variable or With block variable not set - Occurs for a variety of different reasons, most common being that a required field is passed a null value."
                    },
                    "Company not found or invalid": {
                      "type": "string",
                      "example": "Occurs when searching for a company that does not exist in the database. Can also occur during booking with the Account payment type providing invalid company information"
                    },
                    "Cannot exceed more then + or 7 day": {
                      "type": "string",
                      "example": "Occurs when trying to get travel options passing a value greater than 7 for DaysBefore or DaysAfter"
                    },
                    "Failed to find reservation number: ReservationNumber": {
                      "type": "string",
                      "example": "Occurs when searching for a reservation that does not exist in the database (ReservationNumber will be the invalid reservation number that was passed into the request"
                    },
                    "Failed to add UserProfile to the database": {
                      "type": "string",
                      "example": "Occurs when attempting to add a user profile whose Profile Name already exists in the database (must be unique)"
                    },
                    "Failed to update user profile: ConcurrencyError": {
                      "type": "string",
                      "example": "Occurs when attempting to update a user profile that is being modified by another use"
                    },
                    "There was an error during login. Please try again": {
                      "type": "string",
                      "example": "Occurs during session login when the server if unreachable"
                    },
                    "-7001": {
                      "type": "string",
                      "example": "Fare has sold out during reservation attempt."
                    },
                    "-7002,-6955": {
                      "type": "string",
                      "example": "Seat availability has sold out during reservation attempt."
                    },
                    "-9987": {
                      "type": "string",
                      "example": "Infant seat availability has sold out during reservation attempt."
                    },
                    "-2147220500": {
                      "type": "string",
                      "example": "Purchase order is required and not provided."
                    },
                    "-101, -9799": {
                      "type": "string",
                      "example": "Company does not have enough credit for the purchase."
                    },
                    "-111": {
                      "type": "string",
                      "example": "Generalized booking error. This is a catch all error and does not specify any one cause."
                    },
                    "-10001": {
                      "type": "string",
                      "example": "Error getting user agency / Error getting reservation currency / currency conversion failure / Error getting company / Error getting credit card Type / Error getting payment method / Voucher payment type code is not equal to VO / Error identifying with fare class"
                    },
                    "-7777777": {
                      "type": "string",
                      "example": "Permission denied. The user is missing a required permission to complete the booking."
                    },
                    "-7006": {
                      "type": "string",
                      "example": "Error getting fare / No fares found for given booking code"
                    },
                    "-7009": {
                      "type": "string",
                      "example": "Unable to convert fares to desired currency."
                    },
                    "-6998": {
                      "type": "string",
                      "example": "The reservation balance is greater than the given payment."
                    },
                    "-6966": {
                      "type": "string",
                      "example": "Voucher attempt failed validation."
                    },
                    "-6955": {
                      "type": "string",
                      "example": "Availability check failed, either no valid fare was found or one or more of the seats are no longer available."
                    },
                    "-6956": {
                      "type": "string",
                      "example": "Error occurred adding reservation to the database."
                    },
                    "-2147217900": {
                      "type": "string",
                      "example": "Database foreign key constraint issue."
                    },
                    "-200001": {
                      "type": "string",
                      "example": "Failed Seat assignment."
                    },
                    "-120": {
                      "type": "string",
                      "example": "Error creating passenger profile."
                    },
                    "-65987": {
                      "type": "string",
                      "example": "This error generally manifests when the processing fees for the credit card payment are either not included or incorrect."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reservations/{key}": {
      "get": {
        "tags": ["Reservations"],
        "summary": "Retrieve the reservation for the provided key.",
        "operationId": "ApiReservationsByKeyGet",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "The access key for a reservation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reservations/{key}/bookingInformation/{bookingInformationKey}": {
      "get": {
        "tags": ["Reservations"],
        "summary": "Retrieve the reservation booking information for the provided key.",
        "operationId": "ApiReservationsByKeyBookingInformationByBookingInformationKeyGet",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The access key for a reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookingInformationKey",
            "in": "path",
            "description": "The key value for a reservation's booking information.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success,",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": ["Reservations"],
        "summary": "Update the reservation booking information for the provided key.",
        "operationId": "ApiReservationsByKeyBookingInformationByBookingInformationKeyPut",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The access key for a reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookingInformationKey",
            "in": "path",
            "description": "The key value for a reservation's booking information.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingInfoModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "1000": {
                      "type": "string",
                      "example": "Credit Card processing issue."
                    },
                    "Deserialization Failed": {
                      "type": "string",
                      "example": "Happens when Request is not properly formatted (i.e. missing or misspelled elements"
                    },
                    "An error occurred when verifying security for the message": {
                      "type": "string",
                      "example": "Occurs when request is missing required element"
                    },
                    "ContractFilter mismatch at the EndpointDispatcher": {
                      "type": "string",
                      "example": "Can manifest because of a variety of different reasons, usually occurs when the endpoint URL is invalid"
                    },
                    "The booking request failed. The reservation was not created successfully": {
                      "type": "string",
                      "example": "Occurs when trying to book a reservation with credit card payment type if processing fees are applicable but not provided in the request"
                    },
                    "-91": {
                      "type": "string",
                      "example": "Object variable or With block variable not set - Occurs for a variety of different reasons, most common being that a required field is passed a null value."
                    },
                    "Company not found or invalid": {
                      "type": "string",
                      "example": "Occurs when searching for a company that does not exist in the database. Can also occur during booking with the Account payment type providing invalid company information"
                    },
                    "Cannot exceed more then + or 7 day": {
                      "type": "string",
                      "example": "Occurs when trying to get travel options passing a value greater than 7 for DaysBefore or DaysAfter"
                    },
                    "Failed to find reservation number: ReservationNumber": {
                      "type": "string",
                      "example": "Occurs when searching for a reservation that does not exist in the database (ReservationNumber will be the invalid reservation number that was passed into the request"
                    },
                    "Failed to add UserProfile to the database": {
                      "type": "string",
                      "example": "Occurs when attempting to add a user profile whose Profile Name already exists in the database (must be unique)"
                    },
                    "Failed to update user profile: ConcurrencyError": {
                      "type": "string",
                      "example": "Occurs when attempting to update a user profile that is being modified by another use"
                    },
                    "There was an error during login. Please try again": {
                      "type": "string",
                      "example": "Occurs during session login when the server if unreachable"
                    },
                    "-7001": {
                      "type": "string",
                      "example": "Fare has sold out during reservation attempt."
                    },
                    "-7002,-6955": {
                      "type": "string",
                      "example": "Seat availability has sold out during reservation attempt."
                    },
                    "-9987": {
                      "type": "string",
                      "example": "Infant seat availability has sold out during reservation attempt."
                    },
                    "-2147220500": {
                      "type": "string",
                      "example": "Purchase order is required and not provided."
                    },
                    "-101, -9799": {
                      "type": "string",
                      "example": "Company does not have enough credit for the purchase."
                    },
                    "-111": {
                      "type": "string",
                      "example": "Generalized booking error. This is a catch all error and does not specify any one cause."
                    },
                    "-10001": {
                      "type": "string",
                      "example": "Error getting user agency / Error getting reservation currency / currency conversion failure / Error getting company / Error getting credit card Type / Error getting payment method / Voucher payment type code is not equal to VO / Error identifying with fare class"
                    },
                    "-7777777": {
                      "type": "string",
                      "example": "Permission denied. The user is missing a required permission to complete the booking."
                    },
                    "-7006": {
                      "type": "string",
                      "example": "Error getting fare / No fares found for given booking code"
                    },
                    "-7009": {
                      "type": "string",
                      "example": "Unable to convert fares to desired currency."
                    },
                    "-6998": {
                      "type": "string",
                      "example": "The reservation balance is greater than the given payment."
                    },
                    "-6966": {
                      "type": "string",
                      "example": "Voucher attempt failed validation."
                    },
                    "-6955": {
                      "type": "string",
                      "example": "Availability check failed, either no valid fare was found or one or more of the seats are no longer available."
                    },
                    "-6956": {
                      "type": "string",
                      "example": "Error occurred adding reservation to the database."
                    },
                    "-2147217900": {
                      "type": "string",
                      "example": "Database foreign key constraint issue."
                    },
                    "-200001": {
                      "type": "string",
                      "example": "Failed Seat assignment."
                    },
                    "-120": {
                      "type": "string",
                      "example": "Error creating passenger profile."
                    },
                    "-65987": {
                      "type": "string",
                      "example": "This error generally manifests when the processing fees for the credit card payment are either not included or incorrect."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reservations/{key}/journeys": {
      "post": {
        "tags": ["Reservations"],
        "summary": "Add the provided reservation journey.",
        "operationId": "ApiReservationsByKeyJourneysPost",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The access key for a reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationJourneyModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "1000": {
                      "type": "string",
                      "example": "Credit Card processing issue."
                    },
                    "Deserialization Failed": {
                      "type": "string",
                      "example": "Happens when Request is not properly formatted (i.e. missing or misspelled elements"
                    },
                    "An error occurred when verifying security for the message": {
                      "type": "string",
                      "example": "Occurs when request is missing required element"
                    },
                    "ContractFilter mismatch at the EndpointDispatcher": {
                      "type": "string",
                      "example": "Can manifest because of a variety of different reasons, usually occurs when the endpoint URL is invalid"
                    },
                    "The booking request failed. The reservation was not created successfully": {
                      "type": "string",
                      "example": "Occurs when trying to book a reservation with credit card payment type if processing fees are applicable but not provided in the request"
                    },
                    "-91": {
                      "type": "string",
                      "example": "Object variable or With block variable not set - Occurs for a variety of different reasons, most common being that a required field is passed a null value."
                    },
                    "Company not found or invalid": {
                      "type": "string",
                      "example": "Occurs when searching for a company that does not exist in the database. Can also occur during booking with the Account payment type providing invalid company information"
                    },
                    "Cannot exceed more then + or 7 day": {
                      "type": "string",
                      "example": "Occurs when trying to get travel options passing a value greater than 7 for DaysBefore or DaysAfter"
                    },
                    "Failed to find reservation number: ReservationNumber": {
                      "type": "string",
                      "example": "Occurs when searching for a reservation that does not exist in the database (ReservationNumber will be the invalid reservation number that was passed into the request"
                    },
                    "Failed to add UserProfile to the database": {
                      "type": "string",
                      "example": "Occurs when attempting to add a user profile whose Profile Name already exists in the database (must be unique)"
                    },
                    "Failed to update user profile: ConcurrencyError": {
                      "type": "string",
                      "example": "Occurs when attempting to update a user profile that is being modified by another use"
                    },
                    "There was an error during login. Please try again": {
                      "type": "string",
                      "example": "Occurs during session login when the server if unreachable"
                    },
                    "-7001": {
                      "type": "string",
                      "example": "Fare has sold out during reservation attempt."
                    },
                    "-7002,-6955": {
                      "type": "string",
                      "example": "Seat availability has sold out during reservation attempt."
                    },
                    "-9987": {
                      "type": "string",
                      "example": "Infant seat availability has sold out during reservation attempt."
                    },
                    "-2147220500": {
                      "type": "string",
                      "example": "Purchase order is required and not provided."
                    },
                    "-101, -9799": {
                      "type": "string",
                      "example": "Company does not have enough credit for the purchase."
                    },
                    "-111": {
                      "type": "string",
                      "example": "Generalized booking error. This is a catch all error and does not specify any one cause."
                    },
                    "-10001": {
                      "type": "string",
                      "example": "Error getting user agency / Error getting reservation currency / currency conversion failure / Error getting company / Error getting credit card Type / Error getting payment method / Voucher payment type code is not equal to VO / Error identifying with fare class"
                    },
                    "-7777777": {
                      "type": "string",
                      "example": "Permission denied. The user is missing a required permission to complete the booking."
                    },
                    "-7006": {
                      "type": "string",
                      "example": "Error getting fare / No fares found for given booking code"
                    },
                    "-7009": {
                      "type": "string",
                      "example": "Unable to convert fares to desired currency."
                    },
                    "-6998": {
                      "type": "string",
                      "example": "The reservation balance is greater than the given payment."
                    },
                    "-6966": {
                      "type": "string",
                      "example": "Voucher attempt failed validation."
                    },
                    "-6955": {
                      "type": "string",
                      "example": "Availability check failed, either no valid fare was found or one or more of the seats are no longer available."
                    },
                    "-6956": {
                      "type": "string",
                      "example": "Error occurred adding reservation to the database."
                    },
                    "-2147217900": {
                      "type": "string",
                      "example": "Database foreign key constraint issue."
                    },
                    "-200001": {
                      "type": "string",
                      "example": "Failed Seat assignment."
                    },
                    "-120": {
                      "type": "string",
                      "example": "Error creating passenger profile."
                    },
                    "-65987": {
                      "type": "string",
                      "example": "This error generally manifests when the processing fees for the credit card payment are either not included or incorrect."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": ["Reservations"],
        "summary": "Update the provided reservation journey.",
        "operationId": "ApiReservationsByKeyJourneysPut",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The access key for a reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationJourneyModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "1000": {
                      "type": "string",
                      "example": "Credit Card processing issue."
                    },
                    "Deserialization Failed": {
                      "type": "string",
                      "example": "Happens when Request is not properly formatted (i.e. missing or misspelled elements"
                    },
                    "An error occurred when verifying security for the message": {
                      "type": "string",
                      "example": "Occurs when request is missing required element"
                    },
                    "ContractFilter mismatch at the EndpointDispatcher": {
                      "type": "string",
                      "example": "Can manifest because of a variety of different reasons, usually occurs when the endpoint URL is invalid"
                    },
                    "The booking request failed. The reservation was not created successfully": {
                      "type": "string",
                      "example": "Occurs when trying to book a reservation with credit card payment type if processing fees are applicable but not provided in the request"
                    },
                    "-91": {
                      "type": "string",
                      "example": "Object variable or With block variable not set - Occurs for a variety of different reasons, most common being that a required field is passed a null value."
                    },
                    "Company not found or invalid": {
                      "type": "string",
                      "example": "Occurs when searching for a company that does not exist in the database. Can also occur during booking with the Account payment type providing invalid company information"
                    },
                    "Cannot exceed more then + or 7 day": {
                      "type": "string",
                      "example": "Occurs when trying to get travel options passing a value greater than 7 for DaysBefore or DaysAfter"
                    },
                    "Failed to find reservation number: ReservationNumber": {
                      "type": "string",
                      "example": "Occurs when searching for a reservation that does not exist in the database (ReservationNumber will be the invalid reservation number that was passed into the request"
                    },
                    "Failed to add UserProfile to the database": {
                      "type": "string",
                      "example": "Occurs when attempting to add a user profile whose Profile Name already exists in the database (must be unique)"
                    },
                    "Failed to update user profile: ConcurrencyError": {
                      "type": "string",
                      "example": "Occurs when attempting to update a user profile that is being modified by another use"
                    },
                    "There was an error during login. Please try again": {
                      "type": "string",
                      "example": "Occurs during session login when the server if unreachable"
                    },
                    "-7001": {
                      "type": "string",
                      "example": "Fare has sold out during reservation attempt."
                    },
                    "-7002,-6955": {
                      "type": "string",
                      "example": "Seat availability has sold out during reservation attempt."
                    },
                    "-9987": {
                      "type": "string",
                      "example": "Infant seat availability has sold out during reservation attempt."
                    },
                    "-2147220500": {
                      "type": "string",
                      "example": "Purchase order is required and not provided."
                    },
                    "-101, -9799": {
                      "type": "string",
                      "example": "Company does not have enough credit for the purchase."
                    },
                    "-111": {
                      "type": "string",
                      "example": "Generalized booking error. This is a catch all error and does not specify any one cause."
                    },
                    "-10001": {
                      "type": "string",
                      "example": "Error getting user agency / Error getting reservation currency / currency conversion failure / Error getting company / Error getting credit card Type / Error getting payment method / Voucher payment type code is not equal to VO / Error identifying with fare class"
                    },
                    "-7777777": {
                      "type": "string",
                      "example": "Permission denied. The user is missing a required permission to complete the booking."
                    },
                    "-7006": {
                      "type": "string",
                      "example": "Error getting fare / No fares found for given booking code"
                    },
                    "-7009": {
                      "type": "string",
                      "example": "Unable to convert fares to desired currency."
                    },
                    "-6998": {
                      "type": "string",
                      "example": "The reservation balance is greater than the given payment."
                    },
                    "-6966": {
                      "type": "string",
                      "example": "Voucher attempt failed validation."
                    },
                    "-6955": {
                      "type": "string",
                      "example": "Availability check failed, either no valid fare was found or one or more of the seats are no longer available."
                    },
                    "-6956": {
                      "type": "string",
                      "example": "Error occurred adding reservation to the database."
                    },
                    "-2147217900": {
                      "type": "string",
                      "example": "Database foreign key constraint issue."
                    },
                    "-200001": {
                      "type": "string",
                      "example": "Failed Seat assignment."
                    },
                    "-120": {
                      "type": "string",
                      "example": "Error creating passenger profile."
                    },
                    "-65987": {
                      "type": "string",
                      "example": "This error generally manifests when the processing fees for the credit card payment are either not included or incorrect."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reservations/{key}/passengers": {
      "get": {
        "tags": ["Reservations"],
        "summary": "Retrieve the passengers list for the provided reservationKey.",
        "operationId": "ApiReservationsByKeyPassengersGet",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The access key for a reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": ["Reservations"],
        "summary": "Add passengers list for provided reservationKey.",
        "operationId": "ApiReservationsByKeyPassengersPost",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The access key for a reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationPassengerModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "1000": {
                      "type": "string",
                      "example": "Credit Card processing issue."
                    },
                    "Deserialization Failed": {
                      "type": "string",
                      "example": "Happens when Request is not properly formatted (i.e. missing or misspelled elements"
                    },
                    "An error occurred when verifying security for the message": {
                      "type": "string",
                      "example": "Occurs when request is missing required element"
                    },
                    "ContractFilter mismatch at the EndpointDispatcher": {
                      "type": "string",
                      "example": "Can manifest because of a variety of different reasons, usually occurs when the endpoint URL is invalid"
                    },
                    "The booking request failed. The reservation was not created successfully": {
                      "type": "string",
                      "example": "Occurs when trying to book a reservation with credit card payment type if processing fees are applicable but not provided in the request"
                    },
                    "-91": {
                      "type": "string",
                      "example": "Object variable or With block variable not set - Occurs for a variety of different reasons, most common being that a required field is passed a null value."
                    },
                    "Company not found or invalid": {
                      "type": "string",
                      "example": "Occurs when searching for a company that does not exist in the database. Can also occur during booking with the Account payment type providing invalid company information"
                    },
                    "Cannot exceed more then + or 7 day": {
                      "type": "string",
                      "example": "Occurs when trying to get travel options passing a value greater than 7 for DaysBefore or DaysAfter"
                    },
                    "Failed to find reservation number: ReservationNumber": {
                      "type": "string",
                      "example": "Occurs when searching for a reservation that does not exist in the database (ReservationNumber will be the invalid reservation number that was passed into the request"
                    },
                    "Failed to add UserProfile to the database": {
                      "type": "string",
                      "example": "Occurs when attempting to add a user profile whose Profile Name already exists in the database (must be unique)"
                    },
                    "Failed to update user profile: ConcurrencyError": {
                      "type": "string",
                      "example": "Occurs when attempting to update a user profile that is being modified by another use"
                    },
                    "There was an error during login. Please try again": {
                      "type": "string",
                      "example": "Occurs during session login when the server if unreachable"
                    },
                    "-7001": {
                      "type": "string",
                      "example": "Fare has sold out during reservation attempt."
                    },
                    "-7002,-6955": {
                      "type": "string",
                      "example": "Seat availability has sold out during reservation attempt."
                    },
                    "-9987": {
                      "type": "string",
                      "example": "Infant seat availability has sold out during reservation attempt."
                    },
                    "-2147220500": {
                      "type": "string",
                      "example": "Purchase order is required and not provided."
                    },
                    "-101, -9799": {
                      "type": "string",
                      "example": "Company does not have enough credit for the purchase."
                    },
                    "-111": {
                      "type": "string",
                      "example": "Generalized booking error. This is a catch all error and does not specify any one cause."
                    },
                    "-10001": {
                      "type": "string",
                      "example": "Error getting user agency / Error getting reservation currency / currency conversion failure / Error getting company / Error getting credit card Type / Error getting payment method / Voucher payment type code is not equal to VO / Error identifying with fare class"
                    },
                    "-7777777": {
                      "type": "string",
                      "example": "Permission denied. The user is missing a required permission to complete the booking."
                    },
                    "-7006": {
                      "type": "string",
                      "example": "Error getting fare / No fares found for given booking code"
                    },
                    "-7009": {
                      "type": "string",
                      "example": "Unable to convert fares to desired currency."
                    },
                    "-6998": {
                      "type": "string",
                      "example": "The reservation balance is greater than the given payment."
                    },
                    "-6966": {
                      "type": "string",
                      "example": "Voucher attempt failed validation."
                    },
                    "-6955": {
                      "type": "string",
                      "example": "Availability check failed, either no valid fare was found or one or more of the seats are no longer available."
                    },
                    "-6956": {
                      "type": "string",
                      "example": "Error occurred adding reservation to the database."
                    },
                    "-2147217900": {
                      "type": "string",
                      "example": "Database foreign key constraint issue."
                    },
                    "-200001": {
                      "type": "string",
                      "example": "Failed Seat assignment."
                    },
                    "-120": {
                      "type": "string",
                      "example": "Error creating passenger profile."
                    },
                    "-65987": {
                      "type": "string",
                      "example": "This error generally manifests when the processing fees for the credit card payment are either not included or incorrect."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reservations/{key}/passengers/{passengerKey}": {
      "get": {
        "tags": ["Reservations"],
        "summary": "Retrieve the passenger detail for the provided reservationkey and passengerKey.",
        "operationId": "ApiReservationsByKeyPassengersByPassengerKeyGet",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The access key for a reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passengerKey",
            "in": "path",
            "description": "The access key for a Passenger.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": ["Reservations"],
        "summary": "Update the provided reservation passenger.",
        "operationId": "ApiReservationsByKeyPassengersByPassengerKeyPut",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The access key for a reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passengerKey",
            "in": "path",
            "description": "The access key for a passenger.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "1000": {
                      "type": "string",
                      "example": "Credit Card processing issue."
                    },
                    "Deserialization Failed": {
                      "type": "string",
                      "example": "Happens when Request is not properly formatted (i.e. missing or misspelled elements"
                    },
                    "An error occurred when verifying security for the message": {
                      "type": "string",
                      "example": "Occurs when request is missing required element"
                    },
                    "ContractFilter mismatch at the EndpointDispatcher": {
                      "type": "string",
                      "example": "Can manifest because of a variety of different reasons, usually occurs when the endpoint URL is invalid"
                    },
                    "The booking request failed. The reservation was not created successfully": {
                      "type": "string",
                      "example": "Occurs when trying to book a reservation with credit card payment type if processing fees are applicable but not provided in the request"
                    },
                    "-91": {
                      "type": "string",
                      "example": "Object variable or With block variable not set - Occurs for a variety of different reasons, most common being that a required field is passed a null value."
                    },
                    "Company not found or invalid": {
                      "type": "string",
                      "example": "Occurs when searching for a company that does not exist in the database. Can also occur during booking with the Account payment type providing invalid company information"
                    },
                    "Cannot exceed more then + or 7 day": {
                      "type": "string",
                      "example": "Occurs when trying to get travel options passing a value greater than 7 for DaysBefore or DaysAfter"
                    },
                    "Failed to find reservation number: ReservationNumber": {
                      "type": "string",
                      "example": "Occurs when searching for a reservation that does not exist in the database (ReservationNumber will be the invalid reservation number that was passed into the request"
                    },
                    "Failed to add UserProfile to the database": {
                      "type": "string",
                      "example": "Occurs when attempting to add a user profile whose Profile Name already exists in the database (must be unique)"
                    },
                    "Failed to update user profile: ConcurrencyError": {
                      "type": "string",
                      "example": "Occurs when attempting to update a user profile that is being modified by another use"
                    },
                    "There was an error during login. Please try again": {
                      "type": "string",
                      "example": "Occurs during session login when the server if unreachable"
                    },
                    "-7001": {
                      "type": "string",
                      "example": "Fare has sold out during reservation attempt."
                    },
                    "-7002,-6955": {
                      "type": "string",
                      "example": "Seat availability has sold out during reservation attempt."
                    },
                    "-9987": {
                      "type": "string",
                      "example": "Infant seat availability has sold out during reservation attempt."
                    },
                    "-2147220500": {
                      "type": "string",
                      "example": "Purchase order is required and not provided."
                    },
                    "-101, -9799": {
                      "type": "string",
                      "example": "Company does not have enough credit for the purchase."
                    },
                    "-111": {
                      "type": "string",
                      "example": "Generalized booking error. This is a catch all error and does not specify any one cause."
                    },
                    "-10001": {
                      "type": "string",
                      "example": "Error getting user agency / Error getting reservation currency / currency conversion failure / Error getting company / Error getting credit card Type / Error getting payment method / Voucher payment type code is not equal to VO / Error identifying with fare class"
                    },
                    "-7777777": {
                      "type": "string",
                      "example": "Permission denied. The user is missing a required permission to complete the booking."
                    },
                    "-7006": {
                      "type": "string",
                      "example": "Error getting fare / No fares found for given booking code"
                    },
                    "-7009": {
                      "type": "string",
                      "example": "Unable to convert fares to desired currency."
                    },
                    "-6998": {
                      "type": "string",
                      "example": "The reservation balance is greater than the given payment."
                    },
                    "-6966": {
                      "type": "string",
                      "example": "Voucher attempt failed validation."
                    },
                    "-6955": {
                      "type": "string",
                      "example": "Availability check failed, either no valid fare was found or one or more of the seats are no longer available."
                    },
                    "-6956": {
                      "type": "string",
                      "example": "Error occurred adding reservation to the database."
                    },
                    "-2147217900": {
                      "type": "string",
                      "example": "Database foreign key constraint issue."
                    },
                    "-200001": {
                      "type": "string",
                      "example": "Failed Seat assignment."
                    },
                    "-120": {
                      "type": "string",
                      "example": "Error creating passenger profile."
                    },
                    "-65987": {
                      "type": "string",
                      "example": "This error generally manifests when the processing fees for the credit card payment are either not included or incorrect."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reservations/{key}/ancillaryPurchases/bulk": {
      "post": {
        "tags": ["Reservations"],
        "summary": "Add the provided reservation ancillary purchases.",
        "operationId": "ApiReservationsByKeyAncillaryPurchasesPost",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The access key for a reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReservationAncillaryPurchaseModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "1000": {
                      "type": "string",
                      "example": "Credit Card processing issue."
                    },
                    "Deserialization Failed": {
                      "type": "string",
                      "example": "Happens when Request is not properly formatted (i.e. missing or misspelled elements"
                    },
                    "An error occurred when verifying security for the message": {
                      "type": "string",
                      "example": "Occurs when request is missing required element"
                    },
                    "ContractFilter mismatch at the EndpointDispatcher": {
                      "type": "string",
                      "example": "Can manifest because of a variety of different reasons, usually occurs when the endpoint URL is invalid"
                    },
                    "The booking request failed. The reservation was not created successfully": {
                      "type": "string",
                      "example": "Occurs when trying to book a reservation with credit card payment type if processing fees are applicable but not provided in the request"
                    },
                    "-91": {
                      "type": "string",
                      "example": "Object variable or With block variable not set - Occurs for a variety of different reasons, most common being that a required field is passed a null value."
                    },
                    "Company not found or invalid": {
                      "type": "string",
                      "example": "Occurs when searching for a company that does not exist in the database. Can also occur during booking with the Account payment type providing invalid company information"
                    },
                    "Cannot exceed more then + or 7 day": {
                      "type": "string",
                      "example": "Occurs when trying to get travel options passing a value greater than 7 for DaysBefore or DaysAfter"
                    },
                    "Failed to find reservation number: ReservationNumber": {
                      "type": "string",
                      "example": "Occurs when searching for a reservation that does not exist in the database (ReservationNumber will be the invalid reservation number that was passed into the request"
                    },
                    "Failed to add UserProfile to the database": {
                      "type": "string",
                      "example": "Occurs when attempting to add a user profile whose Profile Name already exists in the database (must be unique)"
                    },
                    "Failed to update user profile: ConcurrencyError": {
                      "type": "string",
                      "example": "Occurs when attempting to update a user profile that is being modified by another use"
                    },
                    "There was an error during login. Please try again": {
                      "type": "string",
                      "example": "Occurs during session login when the server if unreachable"
                    },
                    "-7001": {
                      "type": "string",
                      "example": "Fare has sold out during reservation attempt."
                    },
                    "-7002,-6955": {
                      "type": "string",
                      "example": "Seat availability has sold out during reservation attempt."
                    },
                    "-9987": {
                      "type": "string",
                      "example": "Infant seat availability has sold out during reservation attempt."
                    },
                    "-2147220500": {
                      "type": "string",
                      "example": "Purchase order is required and not provided."
                    },
                    "-101, -9799": {
                      "type": "string",
                      "example": "Company does not have enough credit for the purchase."
                    },
                    "-111": {
                      "type": "string",
                      "example": "Generalized booking error. This is a catch all error and does not specify any one cause."
                    },
                    "-10001": {
                      "type": "string",
                      "example": "Error getting user agency / Error getting reservation currency / currency conversion failure / Error getting company / Error getting credit card Type / Error getting payment method / Voucher payment type code is not equal to VO / Error identifying with fare class"
                    },
                    "-7777777": {
                      "type": "string",
                      "example": "Permission denied. The user is missing a required permission to complete the booking."
                    },
                    "-7006": {
                      "type": "string",
                      "example": "Error getting fare / No fares found for given booking code"
                    },
                    "-7009": {
                      "type": "string",
                      "example": "Unable to convert fares to desired currency."
                    },
                    "-6998": {
                      "type": "string",
                      "example": "The reservation balance is greater than the given payment."
                    },
                    "-6966": {
                      "type": "string",
                      "example": "Voucher attempt failed validation."
                    },
                    "-6955": {
                      "type": "string",
                      "example": "Availability check failed, either no valid fare was found or one or more of the seats are no longer available."
                    },
                    "-6956": {
                      "type": "string",
                      "example": "Error occurred adding reservation to the database."
                    },
                    "-2147217900": {
                      "type": "string",
                      "example": "Database foreign key constraint issue."
                    },
                    "-200001": {
                      "type": "string",
                      "example": "Failed Seat assignment."
                    },
                    "-120": {
                      "type": "string",
                      "example": "Error creating passenger profile."
                    },
                    "-65987": {
                      "type": "string",
                      "example": "This error generally manifests when the processing fees for the credit card payment are either not included or incorrect."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reservations/{key}/seatSelections/bulk": {
      "post": {
        "tags": ["Reservations"],
        "summary": "Add the provided reservation seat selections.",
        "operationId": "ApiReservationsByKeySeatSelectionsPost",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The access key for a reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReservationSeatSelectionModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "1000": {
                      "type": "string",
                      "example": "Credit Card processing issue."
                    },
                    "Deserialization Failed": {
                      "type": "string",
                      "example": "Happens when Request is not properly formatted (i.e. missing or misspelled elements"
                    },
                    "An error occurred when verifying security for the message": {
                      "type": "string",
                      "example": "Occurs when request is missing required element"
                    },
                    "ContractFilter mismatch at the EndpointDispatcher": {
                      "type": "string",
                      "example": "Can manifest because of a variety of different reasons, usually occurs when the endpoint URL is invalid"
                    },
                    "The booking request failed. The reservation was not created successfully": {
                      "type": "string",
                      "example": "Occurs when trying to book a reservation with credit card payment type if processing fees are applicable but not provided in the request"
                    },
                    "-91": {
                      "type": "string",
                      "example": "Object variable or With block variable not set - Occurs for a variety of different reasons, most common being that a required field is passed a null value."
                    },
                    "Company not found or invalid": {
                      "type": "string",
                      "example": "Occurs when searching for a company that does not exist in the database. Can also occur during booking with the Account payment type providing invalid company information"
                    },
                    "Cannot exceed more then + or 7 day": {
                      "type": "string",
                      "example": "Occurs when trying to get travel options passing a value greater than 7 for DaysBefore or DaysAfter"
                    },
                    "Failed to find reservation number: ReservationNumber": {
                      "type": "string",
                      "example": "Occurs when searching for a reservation that does not exist in the database (ReservationNumber will be the invalid reservation number that was passed into the request"
                    },
                    "Failed to add UserProfile to the database": {
                      "type": "string",
                      "example": "Occurs when attempting to add a user profile whose Profile Name already exists in the database (must be unique)"
                    },
                    "Failed to update user profile: ConcurrencyError": {
                      "type": "string",
                      "example": "Occurs when attempting to update a user profile that is being modified by another use"
                    },
                    "There was an error during login. Please try again": {
                      "type": "string",
                      "example": "Occurs during session login when the server if unreachable"
                    },
                    "-7001": {
                      "type": "string",
                      "example": "Fare has sold out during reservation attempt."
                    },
                    "-7002,-6955": {
                      "type": "string",
                      "example": "Seat availability has sold out during reservation attempt."
                    },
                    "-9987": {
                      "type": "string",
                      "example": "Infant seat availability has sold out during reservation attempt."
                    },
                    "-2147220500": {
                      "type": "string",
                      "example": "Purchase order is required and not provided."
                    },
                    "-101, -9799": {
                      "type": "string",
                      "example": "Company does not have enough credit for the purchase."
                    },
                    "-111": {
                      "type": "string",
                      "example": "Generalized booking error. This is a catch all error and does not specify any one cause."
                    },
                    "-10001": {
                      "type": "string",
                      "example": "Error getting user agency / Error getting reservation currency / currency conversion failure / Error getting company / Error getting credit card Type / Error getting payment method / Voucher payment type code is not equal to VO / Error identifying with fare class"
                    },
                    "-7777777": {
                      "type": "string",
                      "example": "Permission denied. The user is missing a required permission to complete the booking."
                    },
                    "-7006": {
                      "type": "string",
                      "example": "Error getting fare / No fares found for given booking code"
                    },
                    "-7009": {
                      "type": "string",
                      "example": "Unable to convert fares to desired currency."
                    },
                    "-6998": {
                      "type": "string",
                      "example": "The reservation balance is greater than the given payment."
                    },
                    "-6966": {
                      "type": "string",
                      "example": "Voucher attempt failed validation."
                    },
                    "-6955": {
                      "type": "string",
                      "example": "Availability check failed, either no valid fare was found or one or more of the seats are no longer available."
                    },
                    "-6956": {
                      "type": "string",
                      "example": "Error occurred adding reservation to the database."
                    },
                    "-2147217900": {
                      "type": "string",
                      "example": "Database foreign key constraint issue."
                    },
                    "-200001": {
                      "type": "string",
                      "example": "Failed Seat assignment."
                    },
                    "-120": {
                      "type": "string",
                      "example": "Error creating passenger profile."
                    },
                    "-65987": {
                      "type": "string",
                      "example": "This error generally manifests when the processing fees for the credit card payment are either not included or incorrect."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reservations/{key}/paymentTransactions": {
      "post": {
        "tags": ["Reservations"],
        "summary": "Add the provided reservation payment.",
        "operationId": "ApiReservationsByKeyPaymentTransactionsPost",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The access key for a reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationPaymentTransactionModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "1000": {
                      "type": "string",
                      "example": "Credit Card processing issue."
                    },
                    "Deserialization Failed": {
                      "type": "string",
                      "example": "Happens when Request is not properly formatted (i.e. missing or misspelled elements"
                    },
                    "An error occurred when verifying security for the message": {
                      "type": "string",
                      "example": "Occurs when request is missing required element"
                    },
                    "ContractFilter mismatch at the EndpointDispatcher": {
                      "type": "string",
                      "example": "Can manifest because of a variety of different reasons, usually occurs when the endpoint URL is invalid"
                    },
                    "The booking request failed. The reservation was not created successfully": {
                      "type": "string",
                      "example": "Occurs when trying to book a reservation with credit card payment type if processing fees are applicable but not provided in the request"
                    },
                    "-91": {
                      "type": "string",
                      "example": "Object variable or With block variable not set - Occurs for a variety of different reasons, most common being that a required field is passed a null value."
                    },
                    "Company not found or invalid": {
                      "type": "string",
                      "example": "Occurs when searching for a company that does not exist in the database. Can also occur during booking with the Account payment type providing invalid company information"
                    },
                    "Cannot exceed more then + or 7 day": {
                      "type": "string",
                      "example": "Occurs when trying to get travel options passing a value greater than 7 for DaysBefore or DaysAfter"
                    },
                    "Failed to find reservation number: ReservationNumber": {
                      "type": "string",
                      "example": "Occurs when searching for a reservation that does not exist in the database (ReservationNumber will be the invalid reservation number that was passed into the request"
                    },
                    "Failed to add UserProfile to the database": {
                      "type": "string",
                      "example": "Occurs when attempting to add a user profile whose Profile Name already exists in the database (must be unique)"
                    },
                    "Failed to update user profile: ConcurrencyError": {
                      "type": "string",
                      "example": "Occurs when attempting to update a user profile that is being modified by another use"
                    },
                    "There was an error during login. Please try again": {
                      "type": "string",
                      "example": "Occurs during session login when the server if unreachable"
                    },
                    "-7001": {
                      "type": "string",
                      "example": "Fare has sold out during reservation attempt."
                    },
                    "-7002,-6955": {
                      "type": "string",
                      "example": "Seat availability has sold out during reservation attempt."
                    },
                    "-9987": {
                      "type": "string",
                      "example": "Infant seat availability has sold out during reservation attempt."
                    },
                    "-2147220500": {
                      "type": "string",
                      "example": "Purchase order is required and not provided."
                    },
                    "-101, -9799": {
                      "type": "string",
                      "example": "Company does not have enough credit for the purchase."
                    },
                    "-111": {
                      "type": "string",
                      "example": "Generalized booking error. This is a catch all error and does not specify any one cause."
                    },
                    "-10001": {
                      "type": "string",
                      "example": "Error getting user agency / Error getting reservation currency / currency conversion failure / Error getting company / Error getting credit card Type / Error getting payment method / Voucher payment type code is not equal to VO / Error identifying with fare class"
                    },
                    "-7777777": {
                      "type": "string",
                      "example": "Permission denied. The user is missing a required permission to complete the booking."
                    },
                    "-7006": {
                      "type": "string",
                      "example": "Error getting fare / No fares found for given booking code"
                    },
                    "-7009": {
                      "type": "string",
                      "example": "Unable to convert fares to desired currency."
                    },
                    "-6998": {
                      "type": "string",
                      "example": "The reservation balance is greater than the given payment."
                    },
                    "-6966": {
                      "type": "string",
                      "example": "Voucher attempt failed validation."
                    },
                    "-6955": {
                      "type": "string",
                      "example": "Availability check failed, either no valid fare was found or one or more of the seats are no longer available."
                    },
                    "-6956": {
                      "type": "string",
                      "example": "Error occurred adding reservation to the database."
                    },
                    "-2147217900": {
                      "type": "string",
                      "example": "Database foreign key constraint issue."
                    },
                    "-200001": {
                      "type": "string",
                      "example": "Failed Seat assignment."
                    },
                    "-120": {
                      "type": "string",
                      "example": "Error creating passenger profile."
                    },
                    "-65987": {
                      "type": "string",
                      "example": "This error generally manifests when the processing fees for the credit card payment are either not included or incorrect."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reservations/{reservationKey}/emailItinerary": {
      "post": {
        "tags": ["Reservations"],
        "summary": "Email the reservation itinerary.",
        "operationId": "ApiReservationsByReservationKeyEmailItineraryPost",
        "parameters": [
          {
            "name": "reservationKey",
            "in": "path",
            "description": "The access key for a reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "in": "query",
            "description": "The two-letter language code for the itinerary.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailAddresses",
            "in": "query",
            "description": "Optional parameter to indicate recipient email addresses for the itinerary. If none are provided and includeAllPassengers is set to true, then the email is sent to the reservation's contact email address. Multiple email addresses can be separated by ';'. If multi-email is not enabled, only the first email in the list will be used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAllPassengers",
            "in": "query",
            "description": "The includeAllPassengers param.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "senderAddress",
            "in": "query",
            "description": "Optional parameter to specify the sender email address for the itinerary. Subject to Sender Policy Framework (SPF) records.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passengerKey",
            "in": "query",
            "description": "Optional parameter to specify the passenger to be listed on the itinerary.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeLogo",
            "in": "query",
            "description": "Optional parameter to include company logo on the itinerary.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeTermsAndConditions",
            "in": "query",
            "description": "Optional parameter to include terms and conditions on the itinerary.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "itineraryTypeCode",
            "in": "query",
            "description": "Optional parameter for itinerary type code (D - Detail, S - Summary, F - No financial)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "1000": {
                      "type": "string",
                      "example": "Credit Card processing issue."
                    },
                    "Deserialization Failed": {
                      "type": "string",
                      "example": "Happens when Request is not properly formatted (i.e. missing or misspelled elements"
                    },
                    "An error occurred when verifying security for the message": {
                      "type": "string",
                      "example": "Occurs when request is missing required element"
                    },
                    "ContractFilter mismatch at the EndpointDispatcher": {
                      "type": "string",
                      "example": "Can manifest because of a variety of different reasons, usually occurs when the endpoint URL is invalid"
                    },
                    "The booking request failed. The reservation was not created successfully": {
                      "type": "string",
                      "example": "Occurs when trying to book a reservation with credit card payment type if processing fees are applicable but not provided in the request"
                    },
                    "-91": {
                      "type": "string",
                      "example": "Object variable or With block variable not set - Occurs for a variety of different reasons, most common being that a required field is passed a null value."
                    },
                    "Company not found or invalid": {
                      "type": "string",
                      "example": "Occurs when searching for a company that does not exist in the database. Can also occur during booking with the Account payment type providing invalid company information"
                    },
                    "Cannot exceed more then + or 7 day": {
                      "type": "string",
                      "example": "Occurs when trying to get travel options passing a value greater than 7 for DaysBefore or DaysAfter"
                    },
                    "Failed to find reservation number: ReservationNumber": {
                      "type": "string",
                      "example": "Occurs when searching for a reservation that does not exist in the database (ReservationNumber will be the invalid reservation number that was passed into the request"
                    },
                    "Failed to add UserProfile to the database": {
                      "type": "string",
                      "example": "Occurs when attempting to add a user profile whose Profile Name already exists in the database (must be unique)"
                    },
                    "Failed to update user profile: ConcurrencyError": {
                      "type": "string",
                      "example": "Occurs when attempting to update a user profile that is being modified by another use"
                    },
                    "There was an error during login. Please try again": {
                      "type": "string",
                      "example": "Occurs during session login when the server if unreachable"
                    },
                    "-7001": {
                      "type": "string",
                      "example": "Fare has sold out during reservation attempt."
                    },
                    "-7002,-6955": {
                      "type": "string",
                      "example": "Seat availability has sold out during reservation attempt."
                    },
                    "-9987": {
                      "type": "string",
                      "example": "Infant seat availability has sold out during reservation attempt."
                    },
                    "-2147220500": {
                      "type": "string",
                      "example": "Purchase order is required and not provided."
                    },
                    "-101, -9799": {
                      "type": "string",
                      "example": "Company does not have enough credit for the purchase."
                    },
                    "-111": {
                      "type": "string",
                      "example": "Generalized booking error. This is a catch all error and does not specify any one cause."
                    },
                    "-10001": {
                      "type": "string",
                      "example": "Error getting user agency / Error getting reservation currency / currency conversion failure / Error getting company / Error getting credit card Type / Error getting payment method / Voucher payment type code is not equal to VO / Error identifying with fare class"
                    },
                    "-7777777": {
                      "type": "string",
                      "example": "Permission denied. The user is missing a required permission to complete the booking."
                    },
                    "-7006": {
                      "type": "string",
                      "example": "Error getting fare / No fares found for given booking code"
                    },
                    "-7009": {
                      "type": "string",
                      "example": "Unable to convert fares to desired currency."
                    },
                    "-6998": {
                      "type": "string",
                      "example": "The reservation balance is greater than the given payment."
                    },
                    "-6966": {
                      "type": "string",
                      "example": "Voucher attempt failed validation."
                    },
                    "-6955": {
                      "type": "string",
                      "example": "Availability check failed, either no valid fare was found or one or more of the seats are no longer available."
                    },
                    "-6956": {
                      "type": "string",
                      "example": "Error occurred adding reservation to the database."
                    },
                    "-2147217900": {
                      "type": "string",
                      "example": "Database foreign key constraint issue."
                    },
                    "-200001": {
                      "type": "string",
                      "example": "Failed Seat assignment."
                    },
                    "-120": {
                      "type": "string",
                      "example": "Error creating passenger profile."
                    },
                    "-65987": {
                      "type": "string",
                      "example": "This error generally manifests when the processing fees for the credit card payment are either not included or incorrect."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/quotations": {
      "put": {
        "tags": ["Reservations"],
        "summary": "Quote charges for the provided pending reservation.",
        "operationId": "ApiReservationsQuotationsPut",
        "parameters": [
          {
            "name": "httpMethod",
            "in": "query",
            "description": "The method name of the request to be processed..",
            "required": true,
            "schema": {
              "type": "string",
              "default": "POST"
            }
          },
          {
            "name": "requestUri",
            "in": "query",
            "description": "The URI of the request to be processed.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "reservations"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "1000": {
                      "type": "string",
                      "example": "Credit Card processing issue."
                    },
                    "Deserialization Failed": {
                      "type": "string",
                      "example": "Happens when Request is not properly formatted (i.e. missing or misspelled elements"
                    },
                    "An error occurred when verifying security for the message": {
                      "type": "string",
                      "example": "Occurs when request is missing required element"
                    },
                    "ContractFilter mismatch at the EndpointDispatcher": {
                      "type": "string",
                      "example": "Can manifest because of a variety of different reasons, usually occurs when the endpoint URL is invalid"
                    },
                    "The booking request failed. The reservation was not created successfully": {
                      "type": "string",
                      "example": "Occurs when trying to book a reservation with credit card payment type if processing fees are applicable but not provided in the request"
                    },
                    "-91": {
                      "type": "string",
                      "example": "Object variable or With block variable not set - Occurs for a variety of different reasons, most common being that a required field is passed a null value."
                    },
                    "Company not found or invalid": {
                      "type": "string",
                      "example": "Occurs when searching for a company that does not exist in the database. Can also occur during booking with the Account payment type providing invalid company information"
                    },
                    "Cannot exceed more then + or 7 day": {
                      "type": "string",
                      "example": "Occurs when trying to get travel options passing a value greater than 7 for DaysBefore or DaysAfter"
                    },
                    "Failed to find reservation number: ReservationNumber": {
                      "type": "string",
                      "example": "Occurs when searching for a reservation that does not exist in the database (ReservationNumber will be the invalid reservation number that was passed into the request"
                    },
                    "Failed to add UserProfile to the database": {
                      "type": "string",
                      "example": "Occurs when attempting to add a user profile whose Profile Name already exists in the database (must be unique)"
                    },
                    "Failed to update user profile: ConcurrencyError": {
                      "type": "string",
                      "example": "Occurs when attempting to update a user profile that is being modified by another use"
                    },
                    "There was an error during login. Please try again": {
                      "type": "string",
                      "example": "Occurs during session login when the server if unreachable"
                    },
                    "-7001": {
                      "type": "string",
                      "example": "Fare has sold out during reservation attempt."
                    },
                    "-7002,-6955": {
                      "type": "string",
                      "example": "Seat availability has sold out during reservation attempt."
                    },
                    "-9987": {
                      "type": "string",
                      "example": "Infant seat availability has sold out during reservation attempt."
                    },
                    "-2147220500": {
                      "type": "string",
                      "example": "Purchase order is required and not provided."
                    },
                    "-101, -9799": {
                      "type": "string",
                      "example": "Company does not have enough credit for the purchase."
                    },
                    "-111": {
                      "type": "string",
                      "example": "Generalized booking error. This is a catch all error and does not specify any one cause."
                    },
                    "-10001": {
                      "type": "string",
                      "example": "Error getting user agency / Error getting reservation currency / currency conversion failure / Error getting company / Error getting credit card Type / Error getting payment method / Voucher payment type code is not equal to VO / Error identifying with fare class"
                    },
                    "-7777777": {
                      "type": "string",
                      "example": "Permission denied. The user is missing a required permission to complete the booking."
                    },
                    "-7006": {
                      "type": "string",
                      "example": "Error getting fare / No fares found for given booking code"
                    },
                    "-7009": {
                      "type": "string",
                      "example": "Unable to convert fares to desired currency."
                    },
                    "-6998": {
                      "type": "string",
                      "example": "The reservation balance is greater than the given payment."
                    },
                    "-6966": {
                      "type": "string",
                      "example": "Voucher attempt failed validation."
                    },
                    "-6955": {
                      "type": "string",
                      "example": "Availability check failed, either no valid fare was found or one or more of the seats are no longer available."
                    },
                    "-6956": {
                      "type": "string",
                      "example": "Error occurred adding reservation to the database."
                    },
                    "-2147217900": {
                      "type": "string",
                      "example": "Database foreign key constraint issue."
                    },
                    "-200001": {
                      "type": "string",
                      "example": "Failed Seat assignment."
                    },
                    "-120": {
                      "type": "string",
                      "example": "Error creating passenger profile."
                    },
                    "-65987": {
                      "type": "string",
                      "example": "This error generally manifests when the processing fees for the credit card payment are either not included or incorrect."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/userSessions": {
      "post": {
        "tags": ["UserSessions"],
        "summary": "Get access token",
        "operationId": "ApiUserSessionsPost",
        "security": [
          {
            "basicAuth": [],
            "api-key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSessionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": ["UserSessions"],
        "summary": "Refresh access token",
        "operationId": "ApiUserSessionsPut",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accessToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                  },
                  "refreshToken": {
                    "type": "string",
                    "example": "UxDSmxibU1pT2lKQk1qVTJRMEpETFVoVE5UR"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSessionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Invalid Credentials": {
                      "type": "string",
                      "example": "Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
                    },
                    "Permission Denied": {
                      "type": "string",
                      "example": "Occurs when you do not have permission to perform the target action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "api-key": {
        "type": "apiKey",
        "name": "apikey",
        "in": "header"
      },
      "basicAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "This is method for login user"
      }
    },
    "schemas": {
      "CityPairModel": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "departure": {
            "$ref": "#/components/schemas/CityPairOriginDestModel"
          },
          "arrival": {
            "$ref": "#/components/schemas/CityPairOriginDestModel"
          }
        }
      },
      "CityPairOriginDestModel": {
        "type": "object",
        "properties": {
          "airport": {
            "$ref": "#/components/schemas/CityPairAirportModel"
          }
        }
      },
      "CityPairAirportModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "AirportModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "latitude": {
            "$ref": "#/components/schemas/AirportCoordinatesModel"
          },
          "longitude": {
            "$ref": "#/components/schemas/AirportCoordinatesModel"
          },
          "timezone": {
            "$ref": "#/components/schemas/AirportTimezoneModel"
          },
          "secure": {
            "type": "boolean"
          }
        }
      },
      "AirportCoordinatesModel": {
        "type": "object",
        "properties": {
          "degrees": {
            "format": "int32",
            "type": "integer"
          },
          "minutes": {
            "format": "int32",
            "type": "integer"
          },
          "seconds": {
            "format": "int32",
            "type": "integer"
          },
          "quadrant": {
            "type": "string"
          }
        }
      },
      "AirportTimezoneModel": {
        "type": "object",
        "properties": {
          "followsDst": {
            "type": "boolean"
          },
          "utcOffsetDstOff": {
            "$ref": "#/components/schemas/AirportUtcOffsetModel"
          },
          "utcOffsetDstOn": {
            "$ref": "#/components/schemas/AirportUtcOffsetModel"
          }
        }
      },
      "AirportUtcOffsetModel": {
        "type": "object",
        "properties": {
          "iso": {
            "type": "string"
          },
          "hours": {
            "format": "double",
            "type": "number"
          },
          "minutes": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "CurrencyModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "baseCurrency": {
            "type": "boolean"
          },
          "currentExchangeRate": {
            "format": "double",
            "type": "number"
          },
          "format": {
            "type": "string"
          }
        }
      },
      "CabinClassModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "CountryModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "provinces": {
            "$ref": "#/components/schemas/ProvinceModel"
          }
        }
      },
      "ProvinceModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "CompanyModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/CompanyAccountModel"
          }
        }
      },
      "CompanyAccountModel": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string"
          },
          "creditLimit": {
            "format": "double",
            "type": "number"
          },
          "creditAvailable": {
            "format": "double",
            "type": "number"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyModel"
          }
        }
      },
      "AgencyModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "agencyType": {
            "$ref": "#/components/schemas/AgencyTypeModel"
          },
          "iataNumber": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "masterParentAgency": {
            "type": "object"
          },
          "directParentAgency": {
            "type": "object"
          },
          "specifiedTaxConfiguration": {
            "$ref": "#/components/schemas/TaxConfigurationOverrideModel"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ContactInfoModel"
          },
          "notes": {
            "type": "string"
          },
          "markupCommission": {
            "$ref": "#/components/schemas/MarkupCommissionModel"
          },
          "specifiedHoldTime": {
            "$ref": "#/components/schemas/AgencyHoldTimeOverrideModel"
          },
          "specifiedGroupBookingCount": {
            "$ref": "#/components/schemas/AgencyGroupBookingCountOverrideModel"
          },
          "agencyAccount": {
            "$ref": "#/components/schemas/AgencyCompanyModel"
          },
          "gdsAccount": {
            "$ref": "#/components/schemas/AgencyCompanyModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "AgencyTypeModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StatusModel": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "inactive": {
            "type": "boolean"
          },
          "denied": {
            "type": "boolean"
          }
        }
      },
      "TaxConfigurationOverrideModel": {
        "type": "object",
        "properties": {
          "overridden": {
            "type": "boolean"
          },
          "taxConfiguration": {
            "$ref": "#/components/schemas/TaxConfigurationModel"
          }
        }
      },
      "TaxConfigurationModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "taxRates": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxRateModel"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "TaxRateModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "percentage": {
            "format": "double",
            "type": "number"
          },
          "compound": {
            "type": "boolean"
          }
        }
      },
      "AddressModel": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/LocationModel"
          },
          "postalCode": {
            "type": "string"
          }
        }
      },
      "LocationModel": {
        "type": "object",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/CountryModel"
          },
          "province": {
            "$ref": "#/components/schemas/ProvinceModel"
          }
        }
      },
      "ContactInfoModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "faxNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "MarkupCommissionModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "AgencyHoldTimeOverrideModel": {
        "type": "object",
        "properties": {
          "overridden": {
            "type": "boolean"
          },
          "holdTime": {
            "$ref": "#/components/schemas/AgencyHoldTimeModel"
          }
        }
      },
      "AgencyHoldTimeModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "holdTimeMinutes": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "AgencyGroupBookingCountOverrideModel": {
        "type": "object",
        "properties": {
          "overridden": {
            "type": "boolean"
          },
          "groupBookingCount": {
            "$ref": "#/components/schemas/GroupBookingCountModel"
          }
        }
      },
      "GroupBookingCountModel": {
        "type": "object",
        "properties": {
          "minimumPassengerCount": {
            "format": "int32",
            "type": "integer"
          },
          "maximumPassengerCount": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "AgencyCompanyModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "agencyAccount": {
            "type": "boolean"
          },
          "gdsAccount": {
            "type": "boolean"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyModel"
          }
        }
      },
      "TravelOptionModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "cityPair": {
            "$ref": "#/components/schemas/CityPairModel"
          },
          "departureDate": {
            "type": "string"
          },
          "enRouteHours": {
            "format": "double",
            "type": "number"
          },
          "numberOfStops": {
            "format": "int32",
            "type": "integer"
          },
          "numberOfChanges": {
            "format": "int32",
            "type": "integer"
          },
          "flights": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlightModel"
            }
          },
          "fareOptions": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelOptionFareOptionModel"
            }
          },
          "promoCodeApplicability": {
            "$ref": "#/components/schemas/TravelOptionPromoCodeModel"
          }
        }
      },
      "FlightModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "airlineCode": {
            "$ref": "#/components/schemas/AirlineCodeModel"
          },
          "flightNumber": {
            "type": "string"
          },
          "operatingPartnerCarrier": {
            "$ref": "#/components/schemas/PartnerCarrierModel"
          },
          "flightType": {
            "$ref": "#/components/schemas/FlightTypeModel"
          },
          "aircraftModel": {
            "$ref": "#/components/schemas/AircraftModelModel"
          },
          "departure": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "arrival": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "status": {
            "$ref": "#/components/schemas/FlightLegStatusModel"
          },
          "flightStatus": {
            "$ref": "#/components/schemas/FlightStatusModel"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleModel"
          },
          "legs": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlightLegModel"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "AirlineCodeModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "parent": {
            "type": "boolean"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "PartnerCarrierModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "accountingCode": {
            "type": "string"
          },
          "partnerAgreement": {
            "$ref": "#/components/schemas/PartnerCarrierAgreementModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "PartnerCarrierAgreementModel": {
        "type": "object",
        "properties": {
          "codeshare": {
            "type": "boolean"
          },
          "throughCheckIn": {
            "type": "boolean"
          },
          "shared": {
            "type": "boolean"
          },
          "unknown": {
            "type": "boolean"
          }
        }
      },
      "FlightTypeModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "AircraftModelModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AircraftModelTypeModel"
          },
          "seatingCapacity": {
            "format": "int32",
            "type": "integer"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "AircraftModelTypeModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "FlightOriginDestinationModel": {
        "type": "object",
        "properties": {
          "scheduledTime": {
            "type": "string"
          },
          "localScheduledTime": {
            "type": "string"
          },
          "utcScheduledShortTime": {
            "type": "string"
          },
          "localScheduledShortTime": {
            "type": "string"
          },
          "estimatedTime": {
            "type": "string"
          },
          "utcEstimatedShortTime": {
            "type": "string"
          },
          "utcActualOutShortTime": {
            "type": "string"
          },
          "utcActualOffShortTime": {
            "type": "string"
          },
          "utcActualOnShortTime": {
            "type": "string"
          },
          "utcActualInShortTime": {
            "type": "string"
          },
          "airport": {
            "$ref": "#/components/schemas/AirportModel"
          }
        }
      },
      "FlightLegStatusModel": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "expired": {
            "type": "boolean"
          },
          "checkInClosed": {
            "type": "boolean"
          },
          "closed": {
            "type": "boolean"
          },
          "cancelled": {
            "type": "boolean"
          },
          "locked": {
            "type": "boolean"
          }
        }
      },
      "FlightStatusModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "airlineCode": {
            "type": "object"
          },
          "flightNumber": {
            "type": "string"
          },
          "legs": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "FlightStatusLegModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "legNumber": {
            "format": "int32",
            "type": "integer"
          },
          "flight": {
            "$ref": "#/components/schemas/FlightModel"
          },
          "flightLeg": {
            "$ref": "#/components/schemas/FlightLegModel"
          },
          "aircraftModel": {
            "$ref": "#/components/schemas/AircraftModelModel"
          },
          "tail": {
            "$ref": "#/components/schemas/TailModel"
          },
          "locationStatus": {
            "$ref": "#/components/schemas/LocationStatusModel"
          },
          "flightType": {
            "$ref": "#/components/schemas/FlightTypeModel"
          },
          "flightLegStatus": {
            "$ref": "#/components/schemas/FlightLegStatusModel"
          },
          "distance": {
            "$ref": "#/components/schemas/DistanceModel"
          },
          "departure": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "arrival": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "delays": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlightDelayModel"
            }
          },
          "alerts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlightStatusAlertModel"
            }
          },
          "crewMembers": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlightCrewMemberModel"
            }
          },
          "notes": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "LocationStatusModel": {
        "type": "object",
        "properties": {
          "departure": {
            "type": "boolean"
          },
          "arrival": {
            "type": "boolean"
          }
        }
      },
      "FlightDelayModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "delayMinutes": {
            "format": "int32",
            "type": "integer"
          },
          "delayCode": {
            "$ref": "#/components/schemas/DelayCodeModel"
          },
          "delayApplicability": {
            "$ref": "#/components/schemas/DelayApplicabilityModel"
          },
          "note": {
            "type": "string"
          },
          "flightApplicability": {
            "$ref": "#/components/schemas/FlightApplicabilityModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "DelayCodeModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/DelayCodeCategoryModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "DelayCodeCategoryModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "DelayApplicabilityModel": {
        "type": "object",
        "properties": {
          "arrival": {
            "type": "boolean"
          },
          "departure": {
            "type": "boolean"
          }
        }
      },
      "FlightApplicabilityModel": {
        "type": "object",
        "properties": {
          "recordedLegTime": {
            "type": "boolean"
          },
          "remainingFlightLegs": {
            "type": "boolean"
          }
        }
      },
      "FlightStatusAlertModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "alertType": {
            "$ref": "#/components/schemas/FlightStatusAlertTypeModel"
          },
          "handling": {
            "$ref": "#/components/schemas/FlightStatusAlertHandlingModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "FlightStatusAlertTypeModel": {
        "type": "object",
        "properties": {
          "flightTrack": {
            "type": "boolean"
          },
          "offRecord": {
            "type": "boolean"
          },
          "onRecord": {
            "type": "boolean"
          }
        }
      },
      "FlightStatusAlertHandlingModel": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserModel"
          },
          "notes": {
            "type": "string"
          }
        }
      },
      "FlightLegModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "legNumber": {
            "format": "int32",
            "type": "integer"
          },
          "departure": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "arrival": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "tail": {
            "$ref": "#/components/schemas/TailModel"
          },
          "legStatus": {
            "$ref": "#/components/schemas/FlightLegStatusModel"
          },
          "duration": {
            "$ref": "#/components/schemas/DurationModel"
          },
          "distance": {
            "$ref": "#/components/schemas/DistanceModel"
          },
          "crewMembers": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlightCrewMemberModel"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "TailModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          }
        }
      },
      "DurationModel": {
        "type": "object",
        "properties": {
          "length": {
            "format": "double",
            "type": "number"
          },
          "unitOfMeasurement": {
            "type": "string"
          }
        }
      },
      "DistanceModel": {
        "type": "object",
        "properties": {
          "length": {
            "format": "double",
            "type": "number"
          },
          "unitOfMeasurement": {
            "type": "string"
          }
        }
      },
      "FlightCrewMemberModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "crewMember": {
            "$ref": "#/components/schemas/CrewMemberModel"
          },
          "crewPosition": {
            "$ref": "#/components/schemas/CrewPositionModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "CrewMemberModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/CrewMemberProfileModel"
          },
          "weight": {
            "$ref": "#/components/schemas/WeightModel"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          }
        }
      },
      "CrewMemberProfileModel": {
        "type": "object",
        "properties": {
          "lastName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleInitial": {
            "type": "string"
          },
          "initials": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "birthDate": {
            "type": "string"
          },
          "personalContactInformation": {
            "$ref": "#/components/schemas/ContactInfoModel"
          },
          "passport": {
            "$ref": "#/components/schemas/TravelDocInfoModel"
          }
        }
      },
      "TravelDocInfoModel": {
        "type": "object",
        "required": ["number"],
        "properties": {
          "lastName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "birthDate": {
            "type": "string"
          },
          "nationCountry": {
            "$ref": "#/components/schemas/CountryModel"
          },
          "number": {
            "type": "string"
          },
          "expiryDate": {
            "type": "string"
          },
          "issuingCountry": {
            "$ref": "#/components/schemas/CountryModel"
          },
          "issuingCity": {
            "type": "string"
          },
          "issuingDate": {
            "type": "string"
          }
        }
      },
      "WeightModel": {
        "type": "object",
        "properties": {
          "amount": {
            "format": "double",
            "type": "number"
          },
          "reliability": {
            "$ref": "#/components/schemas/WeightReliabilityModel"
          }
        }
      },
      "WeightReliabilityModel": {
        "type": "object",
        "properties": {
          "specified": {
            "type": "boolean"
          },
          "average": {
            "type": "boolean"
          },
          "estimated": {
            "type": "boolean"
          },
          "unknown": {
            "type": "boolean"
          }
        }
      },
      "CrewPositionModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "crewType": {
            "$ref": "#/components/schemas/CrewTypeModel"
          }
        }
      },
      "CrewTypeModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ScheduleModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "airlineCode": {
            "$ref": "#/components/schemas/AirlineCodeModel"
          },
          "flightNumber": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/FlightLegStatusModel"
          },
          "eticketPermitted": {
            "type": "boolean"
          },
          "validFrom": {
            "type": "string"
          },
          "validTo": {
            "type": "string"
          },
          "localValidFrom": {
            "type": "string"
          },
          "localValidTo": {
            "type": "string"
          },
          "frequency": {
            "$ref": "#/components/schemas/WeeklyFrequencyModel"
          },
          "localFrequency": {
            "$ref": "#/components/schemas/WeeklyFrequencyModel"
          },
          "aircraftModel": {
            "$ref": "#/components/schemas/AircraftModelModel"
          },
          "flightType": {
            "$ref": "#/components/schemas/FlightTypeModel"
          },
          "flightCount": {
            "format": "int32",
            "type": "integer"
          },
          "departure": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "arrival": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "legs": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleLegModel"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "WeeklyFrequencyModel": {
        "type": "object",
        "properties": {
          "sunday": {
            "type": "boolean"
          },
          "monday": {
            "type": "boolean"
          },
          "tuesday": {
            "type": "boolean"
          },
          "wednesday": {
            "type": "boolean"
          },
          "thursday": {
            "type": "boolean"
          },
          "friday": {
            "type": "boolean"
          },
          "saturday": {
            "type": "boolean"
          }
        }
      },
      "ScheduleLegModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "legNumber": {
            "format": "int32",
            "type": "integer"
          },
          "legStatus": {
            "$ref": "#/components/schemas/FlightLegStatusModel"
          },
          "distance": {
            "$ref": "#/components/schemas/DistanceModel"
          },
          "departure": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "arrival": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "TravelOptionFareOptionModel": {
        "type": "object",
        "properties": {
          "bookingKey": {
            "type": "string"
          },
          "fareValidity": {
            "$ref": "#/components/schemas/TravelOptionFareOptionValidityModel"
          },
          "fareClass": {
            "$ref": "#/components/schemas/FareClassModel"
          },
          "bookingCode": {
            "$ref": "#/components/schemas/BookingCodeModel"
          },
          "cabinClass": {
            "$ref": "#/components/schemas/CabinClassModel"
          },
          "fareType": {
            "$ref": "#/components/schemas/FareTypeModel"
          },
          "availability": {
            "format": "int32",
            "type": "integer"
          },
          "cheapestFareType": {
            "type": "boolean"
          },
          "cheapestFareOption": {
            "type": "boolean"
          },
          "fareCharges": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelOptionFareChargeModel"
            }
          },
          "promoCodeApplied": {
            "type": "boolean"
          }
        }
      },
      "TravelOptionFareOptionValidityModel": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean"
          },
          "soldOut": {
            "type": "boolean"
          },
          "noFare": {
            "type": "boolean"
          },
          "invalidAdultAvailability": {
            "type": "boolean"
          },
          "invalidChildAvailability": {
            "type": "boolean"
          },
          "invalidAvailability": {
            "type": "boolean"
          },
          "invalidLayover": {
            "type": "boolean"
          },
          "invalidStayover": {
            "type": "boolean"
          }
        }
      },
      "FareClassModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "bookingCode": {
            "$ref": "#/components/schemas/BookingCodeModel"
          },
          "bookingCodeDefault": {
            "type": "boolean"
          },
          "secondarySelectionDisplay": {
            "type": "boolean"
          },
          "fareType": {
            "$ref": "#/components/schemas/FareTypeModel"
          },
          "bookingStatus": {
            "$ref": "#/components/schemas/BookingStatusModel"
          },
          "fareRules": {
            "$ref": "#/components/schemas/FareRulesModel"
          },
          "fareRestrictions": {
            "$ref": "#/components/schemas/FareRestrictionsModel"
          },
          "seatSale": {
            "type": "boolean"
          },
          "autoApplyCharges": {
            "type": "boolean"
          },
          "nonRevenue": {
            "type": "boolean"
          },
          "allowWaitlist": {
            "type": "boolean"
          },
          "lateBookingOverride": {
            "type": "boolean"
          },
          "passengerApplicability": {
            "$ref": "#/components/schemas/ChargePassengerApplicabilityModel"
          },
          "advancedBookingDays": {
            "format": "int32",
            "type": "integer"
          },
          "journeyApplicability": {
            "$ref": "#/components/schemas/JourneyApplicabilityModel"
          },
          "stayOverCriteria": {
            "$ref": "#/components/schemas/StayOverCriteriaModel"
          },
          "seatSelectionChargeApplicability": {
            "$ref": "#/components/schemas/FareSeatSelectApplicabilityModel"
          },
          "loyaltyMultiplier": {
            "$ref": "#/components/schemas/PercentageRateModel"
          },
          "specifiedCommission": {
            "$ref": "#/components/schemas/SpecifiedCommissionModel"
          },
          "distributionChannels": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DistributionChannelModel"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "BookingCodeModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "cabinClass": {
            "$ref": "#/components/schemas/CabinClassModel"
          },
          "nesting": {
            "$ref": "#/components/schemas/BookingCodeNestingModel"
          },
          "published": {
            "type": "boolean"
          },
          "fareClassDefaultCriteria": {
            "$ref": "#/components/schemas/BookingCodeFareClassDefaultCriteriaModel"
          },
          "seatSelectionCharge": {
            "$ref": "#/components/schemas/BookingCodeSeatSelectChargeModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "BookingCodeNestingModel": {
        "type": "object",
        "properties": {
          "rank": {
            "format": "int32",
            "type": "integer"
          },
          "directParentBookingCode": {
            "$ref": "#/components/schemas/BookingCodeModel"
          }
        }
      },
      "BookingCodeFareClassDefaultCriteriaModel": {
        "type": "object",
        "properties": {
          "bookingStatus": {
            "$ref": "#/components/schemas/BookingStatusModel"
          },
          "fareRules": {
            "$ref": "#/components/schemas/FareRulesModel"
          },
          "fareRestrictions": {
            "$ref": "#/components/schemas/FareRestrictionsModel"
          },
          "seatSale": {
            "type": "boolean"
          },
          "autoApplyCharges": {
            "type": "boolean"
          },
          "advancedBookingDays": {
            "format": "int32",
            "type": "integer"
          },
          "stayOverCriteria": {
            "$ref": "#/components/schemas/StayOverCriteriaModel"
          },
          "distributionChannels": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DistributionChannelModel"
            }
          }
        }
      },
      "BookingStatusModel": {
        "type": "object",
        "properties": {
          "confirmed": {
            "type": "boolean"
          },
          "standby": {
            "type": "boolean"
          },
          "loyalty": {
            "type": "boolean"
          },
          "group": {
            "type": "boolean"
          }
        }
      },
      "FareRulesModel": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "fareRuleType": {
            "$ref": "#/components/schemas/FareRuleTypeModel"
          }
        }
      },
      "FareRuleTypeModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "fareTerms": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FareTermsModel"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "FareTermsModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "language": {
            "$ref": "#/components/schemas/LanguageModel"
          },
          "termsHtml": {
            "type": "string"
          },
          "termsText": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "LanguageModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "FareRestrictionsModel": {
        "type": "object",
        "properties": {
          "upgradeRequired": {
            "type": "boolean"
          },
          "modificationFee": {
            "type": "boolean"
          },
          "refundable": {
            "type": "boolean"
          }
        }
      },
      "StayOverCriteriaModel": {
        "type": "object",
        "properties": {
          "minimumDays": {
            "format": "int32",
            "type": "integer"
          },
          "maximumDays": {
            "format": "int32",
            "type": "integer"
          },
          "frequency": {
            "$ref": "#/components/schemas/WeeklyFrequencyModel"
          }
        }
      },
      "DistributionChannelModel": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "index": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "BookingCodeSeatSelectChargeModel": {
        "type": "object",
        "properties": {
          "chargeAmount": {
            "$ref": "#/components/schemas/CurrencyAmountModel"
          },
          "chargeOverrides": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeOverrideModel"
            }
          }
        }
      },
      "CurrencyAmountModel": {
        "type": "object",
        "properties": {
          "baseAmount": {
            "format": "double",
            "type": "number"
          },
          "discountAmount": {
            "format": "double",
            "type": "number"
          },
          "taxAmount": {
            "format": "double",
            "type": "number"
          },
          "taxRateAmounts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxRateAmountModel"
            }
          },
          "totalAmount": {
            "format": "double",
            "type": "number"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyModel"
          },
          "exchangeRate": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "TaxRateAmountModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "amount": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "ChargeOverrideModel": {
        "type": "object",
        "properties": {
          "routeType": {
            "$ref": "#/components/schemas/RouteTypeModel"
          },
          "currencyAmounts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmountModel"
            }
          }
        }
      },
      "RouteTypeModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "FareTypeModel": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "index": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ChargePassengerApplicabilityModel": {
        "type": "object",
        "properties": {
          "child": {
            "type": "boolean"
          },
          "adult": {
            "type": "boolean"
          },
          "infant": {
            "type": "boolean"
          }
        }
      },
      "JourneyApplicabilityModel": {
        "type": "object",
        "properties": {
          "oneWay": {
            "type": "boolean"
          },
          "return": {
            "type": "boolean"
          }
        }
      },
      "FareSeatSelectApplicabilityModel": {
        "type": "object",
        "properties": {
          "bookingCode": {
            "type": "boolean"
          },
          "seatType": {
            "type": "boolean"
          }
        }
      },
      "PercentageRateModel": {
        "type": "object",
        "properties": {
          "percentage": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "SpecifiedCommissionModel": {
        "type": "object",
        "properties": {
          "overridden": {
            "type": "boolean"
          },
          "commission": {
            "$ref": "#/components/schemas/PercentageRateModel"
          }
        }
      },
      "TravelOptionFareChargeModel": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "bookingApplicability": {
            "$ref": "#/components/schemas/TravelOptionFareChargeApplyModel"
          },
          "passengerApplicability": {
            "$ref": "#/components/schemas/ChargePassengerApplicabilityModel"
          },
          "chargeType": {
            "$ref": "#/components/schemas/ChargeTypeModel"
          },
          "currencyAmounts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmountModel"
            }
          },
          "taxConfiguration": {
            "$ref": "#/components/schemas/TravelOptionTaxConfigModel"
          }
        }
      },
      "TravelOptionFareChargeApplyModel": {
        "type": "object",
        "properties": {
          "allPassengers": {
            "type": "boolean"
          },
          "primaryPassenger": {
            "type": "boolean"
          },
          "optional": {
            "type": "boolean"
          }
        }
      },
      "ChargeTypeModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "saleCode": {
            "type": "string"
          },
          "usageCode": {
            "type": "string"
          }
        }
      },
      "TravelOptionTaxConfigModel": {
        "type": "object",
        "properties": {
          "feeCategory": {
            "$ref": "#/components/schemas/FeeCategoryModel"
          }
        }
      },
      "FeeCategoryModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "TravelOptionPromoCodeModel": {
        "type": "object",
        "properties": {
          "promoCodeRequested": {
            "type": "boolean"
          },
          "promoCodeValidity": {
            "$ref": "#/components/schemas/TravelOptionPromoCodeValidityModel"
          },
          "promoCode": {
            "type": "string"
          }
        }
      },
      "TravelOptionPromoCodeValidityModel": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean"
          },
          "notApplicable": {
            "type": "boolean"
          },
          "noMarket": {
            "type": "boolean"
          },
          "invalidFlightDate": {
            "type": "boolean"
          },
          "notAvailable": {
            "type": "boolean"
          },
          "invalidAvailability": {
            "type": "boolean"
          }
        }
      },
      "SeatSelectionOptionModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "flightSegment": {
            "$ref": "#/components/schemas/FlightSegmentModel"
          },
          "seatMap": {
            "$ref": "#/components/schemas/SeatMapModel"
          },
          "seatOptions": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatSelectionSeatOptionModel"
            }
          }
        }
      },
      "FlightSegmentModel": {
        "type": "object",
        "properties": {
          "flight": {
            "$ref": "#/components/schemas/FlightModel"
          },
          "flightLegs": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlightLegModel"
            }
          }
        }
      },
      "SeatMapModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "aircraftModel": {
            "$ref": "#/components/schemas/AircraftModelModel"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "default": {
            "type": "boolean"
          },
          "weightZoneCount": {
            "format": "int32",
            "type": "integer"
          },
          "seatMapCells": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatMapCellModel"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "SeatMapCellModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "rowIdentifier": {
            "type": "string"
          },
          "seatIdentifier": {
            "type": "string"
          },
          "rowIndex": {
            "format": "int32",
            "type": "integer"
          },
          "columnIndex": {
            "format": "int32",
            "type": "integer"
          },
          "visible": {
            "type": "boolean"
          },
          "cellType": {
            "$ref": "#/components/schemas/SeatMapCellTypeModel"
          },
          "seatQualifiers": {
            "$ref": "#/components/schemas/SeatMapSeatQualifierModel"
          },
          "saleBlocks": {
            "$ref": "#/components/schemas/SeatMapSeatSaleBlockModel"
          },
          "serviceBlocks": {
            "$ref": "#/components/schemas/SeatMapSeatServiceBlockModel"
          },
          "weightZone": {
            "$ref": "#/components/schemas/SeatMapWeightZoneModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "SeatMapCellTypeModel": {
        "type": "object",
        "properties": {
          "aisle": {
            "type": "boolean"
          },
          "seat": {
            "type": "boolean"
          }
        }
      },
      "SeatMapSeatQualifierModel": {
        "type": "object",
        "properties": {
          "aisle": {
            "type": "boolean"
          },
          "window": {
            "type": "boolean"
          },
          "emergencyExit": {
            "type": "boolean"
          },
          "bulkheadFront": {
            "type": "boolean"
          },
          "bulkheadBack": {
            "type": "boolean"
          },
          "overWing": {
            "type": "boolean"
          },
          "nearEngine": {
            "type": "boolean"
          },
          "limitedRecline": {
            "type": "boolean"
          }
        }
      },
      "SeatMapSeatSaleBlockModel": {
        "type": "object",
        "properties": {
          "cityPairBlocks": {
            "$ref": "#/components/schemas/SeatMapSeatCityPairBlockModel"
          },
          "bookingCodeBlocks": {
            "$ref": "#/components/schemas/SeatMapSeatBookingCodeBlockModel"
          },
          "flightBlocks": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatMapSeatFlightBlockModel"
            }
          }
        }
      },
      "SeatMapSeatCityPairBlockModel": {
        "type": "object",
        "properties": {
          "allowAll": {
            "type": "boolean"
          },
          "blockAll": {
            "type": "boolean"
          },
          "allowedCityPairs": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CityPairModel"
            }
          }
        }
      },
      "SeatMapSeatBookingCodeBlockModel": {
        "type": "object",
        "properties": {
          "allowAll": {
            "type": "boolean"
          },
          "blockAll": {
            "type": "boolean"
          },
          "allowedBookingCodes": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingCodeModel"
            }
          }
        }
      },
      "SeatMapSeatFlightBlockModel": {
        "type": "object",
        "properties": {
          "flight": {
            "$ref": "#/components/schemas/FlightModel"
          },
          "flightLeg": {
            "$ref": "#/components/schemas/FlightLegModel"
          },
          "allowOverride": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "SeatMapSeatServiceBlockModel": {
        "type": "object",
        "properties": {
          "tailBlocks": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatMapSeatTailBlockModel"
            }
          }
        }
      },
      "SeatMapSeatTailBlockModel": {
        "type": "object",
        "properties": {
          "tail": {
            "$ref": "#/components/schemas/TailModel"
          },
          "blockFrom": {
            "type": "string"
          },
          "blockTo": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "SeatMapWeightZoneModel": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SeatSelectionSeatOptionModel": {
        "type": "object",
        "properties": {
          "selectionKey": {
            "type": "string"
          },
          "selectionValidity": {
            "$ref": "#/components/schemas/SeatSelectionSeatValidityModel"
          },
          "seatMapCell": {
            "$ref": "#/components/schemas/SeatMapCellModel"
          },
          "blockInformation": {
            "$ref": "#/components/schemas/SeatSelectionSeatBlockInfoModel"
          },
          "seatCharges": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatSelectionSeatOptionChargeModel"
            }
          }
        }
      },
      "SeatSelectionSeatValidityModel": {
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean"
          },
          "reserved": {
            "type": "boolean"
          },
          "saleBlock": {
            "type": "boolean"
          },
          "serviceBlock": {
            "type": "boolean"
          },
          "invalidAllLegs": {
            "type": "boolean"
          }
        }
      },
      "SeatSelectionSeatBlockInfoModel": {
        "type": "object",
        "properties": {
          "blockType": {
            "$ref": "#/components/schemas/SeatSelectionSeatBlockTypeModel"
          },
          "allowOverride": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "SeatSelectionSeatBlockTypeModel": {
        "type": "object",
        "properties": {
          "emergencyExit": {
            "type": "boolean"
          },
          "cityPair": {
            "type": "boolean"
          },
          "bookingCode": {
            "type": "boolean"
          },
          "flight": {
            "type": "boolean"
          },
          "tail": {
            "type": "boolean"
          }
        }
      },
      "SeatSelectionSeatOptionChargeModel": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "chargeType": {
            "$ref": "#/components/schemas/ChargeTypeModel"
          },
          "currencyAmounts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmountModel"
            }
          },
          "taxConfiguration": {
            "$ref": "#/components/schemas/SeatSelectionTaxConfigModel"
          }
        }
      },
      "SeatSelectionTaxConfigModel": {
        "type": "object",
        "properties": {
          "feeCategory": {
            "$ref": "#/components/schemas/FeeCategoryModel"
          }
        }
      },
      "ReservationInsurancePolicyModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "purchaseKey": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "policyStatus": {
            "$ref": "#/components/schemas/PolicyStatus"
          },
          "insuranceProvider": {
            "$ref": "#/components/schemas/InsurancePolicyProviderModel"
          },
          "passengers": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationPassengerModel"
            }
          },
          "paymentTransactions": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationPaymentTransactionModel"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "PolicyStatus": {
        "type": "object",
        "properties": {
          "confirmed": {
            "type": "boolean"
          },
          "cancelled": {
            "type": "boolean"
          },
          "finalized": {
            "type": "boolean"
          }
        }
      },
      "InsurancePolicyProviderModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ReservationPassengerModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "index": {
            "format": "int32",
            "type": "integer"
          },
          "reference": {
            "type": "string"
          },
          "reservationOwner": {
            "type": "boolean"
          },
          "reservationStatus": {
            "$ref": "#/components/schemas/ReservationStatusModel"
          },
          "fareApplicability": {
            "$ref": "#/components/schemas/ChargePassengerApplicabilityModel"
          },
          "reservationProfile": {
            "$ref": "#/components/schemas/ReservationPassengerProfileModel"
          },
          "frequentFlyer": {
            "type": "object"
          },
          "advancePassengerInformation": {
            "type": "object"
          },
          "passengerServiceRequests": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "passengerCostCenter": {
            "type": "object"
          },
          "infants": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "weight": {
            "type": "object"
          },
          "notes": {
            "type": "string"
          },
          "journeys": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "paymentTransactions": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ReservationStatusModel": {
        "type": "object",
        "properties": {
          "confirmed": {
            "type": "boolean"
          },
          "waitlist": {
            "type": "boolean"
          },
          "standby": {
            "type": "boolean"
          },
          "cancelled": {
            "type": "boolean"
          },
          "noshow": {
            "type": "boolean"
          },
          "open": {
            "type": "boolean"
          },
          "pending": {
            "type": "boolean"
          },
          "finalized": {
            "type": "boolean"
          },
          "external": {
            "type": "boolean"
          }
        }
      },
      "ReservationPassengerProfileModel": {
        "type": "object",
        "required": ["passport"],
        "properties": {
          "lastName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "birthDate": {
            "type": "string"
          },
          "nationCountry": {
            "$ref": "#/components/schemas/CountryModel"
          },
          "personalContactInformation": {
            "$ref": "#/components/schemas/PersonalContactInformationModel"
          },
          "businessContactInformation": {
            "$ref": "#/components/schemas/ContactInfoModel"
          },
          "destinationContactInformation": {
            "$ref": "#/components/schemas/ContactInfoModel"
          },
          "passport": {
            "$ref": "#/components/schemas/TravelDocInfoModel"
          },
          "loyaltyProgram": {
            "$ref": "#/components/schemas/LoyaltyProgramModel"
          },
          "preBoard": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "reference1": {
            "type": "string"
          },
          "reference2": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "PersonalContactInformationModel": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string"
          },
          "mobileNumber": {
            "type": "string",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": ["mobileNumber", "email"]
      },
      "LoyaltyProgramModel": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string"
          }
        }
      },
      "FrequentFlyerModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "userLogonName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "reservationProfile": {
            "$ref": "#/components/schemas/ReservationPassengerProfileModel"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "vip": {
            "type": "boolean"
          },
          "loyaltyAccount": {
            "$ref": "#/components/schemas/LoyaltyAccountModel"
          },
          "preferredDepartureAirport": {
            "$ref": "#/components/schemas/AirportModel"
          },
          "preferredArrivalAirport": {
            "$ref": "#/components/schemas/AirportModel"
          },
          "securityChallenges": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrequentFlyerSecurityChallengeModel"
            }
          },
          "creationTime": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "LoyaltyAccountModel": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string"
          },
          "pointsAccumulated": {
            "format": "int32",
            "type": "integer"
          },
          "loyaltyTier": {
            "$ref": "#/components/schemas/LoyaltyTierModel"
          }
        }
      },
      "LoyaltyTierModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "FrequentFlyerSecurityChallengeModel": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string"
          },
          "answer": {
            "type": "string"
          }
        }
      },
      "ReservationAdvancePassengerInfoModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "birthDate": {
            "type": "string"
          },
          "nationCountry": {
            "$ref": "#/components/schemas/CountryModel"
          },
          "residentCountry": {
            "$ref": "#/components/schemas/CountryModel"
          },
          "redressNumber": {
            "type": "string"
          },
          "knownPassengerNumber": {
            "type": "string"
          },
          "clearanceAirport": {
            "$ref": "#/components/schemas/AirportModel"
          },
          "destinationAddress": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "destinationContactInformation": {
            "$ref": "#/components/schemas/ContactInfoModel"
          },
          "documents": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationAdvancePassengerInfoDocModel"
            }
          },
          "verified": {
            "type": "boolean"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ReservationAdvancePassengerInfoDocModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "documentType": {
            "$ref": "#/components/schemas/TravelDocTypeModel"
          },
          "documentInformation": {
            "$ref": "#/components/schemas/TravelDocInfoModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "TravelDocTypeModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ReservationPassengerServiceRequestModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "serviceRequest": {
            "$ref": "#/components/schemas/ServiceRequestModel"
          },
          "journeys": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationPassengerServiceRequestJourneysModel"
            }
          },
          "notes": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ServiceRequestModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "serviceRequestType": {
            "$ref": "#/components/schemas/ServiceRequestTypeModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ServiceRequestTypeModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ReservationPassengerServiceRequestJourneysModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "ReservationPassengerCostCenterModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "costCenter": {
            "$ref": "#/components/schemas/CostCenterModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "CostCenterModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectModel"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ProjectModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "businessUnit": {
            "$ref": "#/components/schemas/BusinessUnitModel"
          },
          "costCenters": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CostCenterModel"
            }
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "BusinessUnitModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vendor": {
            "$ref": "#/components/schemas/VendorModel"
          },
          "projects": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "VendorModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "job": {
            "$ref": "#/components/schemas/JobModel"
          },
          "businessUnits": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "JobModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ReservationPassengerInfantModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "index": {
            "format": "int32",
            "type": "integer"
          },
          "reservationProfile": {
            "$ref": "#/components/schemas/ReservationPassengerProfileModel"
          },
          "advancePassengerInformation": {
            "$ref": "#/components/schemas/ReservationAdvancePassengerInfoModel"
          },
          "notes": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ReservationJourneyModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "index": {
            "format": "int32",
            "type": "integer"
          },
          "departure": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "segments": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JourneySegmentModel"
            }
          },
          "passengerJourneyDetails": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationPassengerJourneyDetailModel"
            }
          },
          "reservationStatus": {
            "$ref": "#/components/schemas/ReservationStatusModel"
          },
          "ancillaryPurchases": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationAncillaryPurchaseModel"
            }
          },
          "seatSelections": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationSeatSelectionModel"
            }
          },
          "paymentTransactions": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationPaymentTransactionModel"
            }
          }
        }
      },
      "JourneySegmentModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "index": {
            "format": "int32",
            "type": "integer"
          },
          "flight": {
            "$ref": "#/components/schemas/FlightModel"
          },
          "departure": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "arrival": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "legs": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JourneyLegModel"
            }
          },
          "reservationStatus": {
            "$ref": "#/components/schemas/ReservationStatusModel"
          }
        }
      },
      "JourneyLegModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "index": {
            "format": "int32",
            "type": "integer"
          },
          "departure": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          },
          "arrival": {
            "$ref": "#/components/schemas/FlightOriginDestinationModel"
          }
        }
      },
      "ReservationPassengerJourneyDetailModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "passenger": {
            "$ref": "#/components/schemas/ReservationPassengerModel"
          },
          "segment": {
            "$ref": "#/components/schemas/JourneySegmentModel"
          },
          "bookingKey": {
            "type": "string"
          },
          "fareClass": {
            "$ref": "#/components/schemas/FareClassModel"
          },
          "bookingCode": {
            "$ref": "#/components/schemas/BookingCodeModel"
          },
          "realizedRevenue": {
            "type": "boolean"
          },
          "shuttle": {
            "type": "boolean"
          },
          "privateFares": {
            "type": "boolean"
          },
          "ticketNumber": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "reservationStatus": {
            "$ref": "#/components/schemas/ReservationStatusModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ReservationAncillaryPurchaseModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "purchaseKey": {
            "type": "string"
          },
          "passenger": {
            "$ref": "#/components/schemas/ReservationPassengerModel"
          },
          "journey": {
            "$ref": "#/components/schemas/ReservationJourneyModel"
          },
          "requirementLocation": {
            "$ref": "#/components/schemas/AncillaryPurchaseRequirementModel"
          },
          "ancillaryItem": {
            "$ref": "#/components/schemas/AncillaryItemModel"
          },
          "ancillaryRedemption": {
            "$ref": "#/components/schemas/AncillaryRedemptionModel"
          },
          "paymentTransactions": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationPaymentTransactionModel"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "AncillaryPurchaseRequirementModel": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "airport": {
            "$ref": "#/components/schemas/AirportModel"
          },
          "cityPair": {
            "$ref": "#/components/schemas/CityPairModel"
          },
          "flight": {
            "$ref": "#/components/schemas/FlightModel"
          }
        }
      },
      "AncillaryItemModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "index": {
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "ancillaryCategory": {
            "$ref": "#/components/schemas/AncillaryCategoryModel"
          },
          "ancillaryOptionType": {
            "$ref": "#/components/schemas/AncillaryOptionTypeModel"
          },
          "chargeAmount": {
            "$ref": "#/components/schemas/CurrencyAmountModel"
          },
          "chargeOverrides": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeOverrideModel"
            }
          },
          "fareClassOverrides": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AncillaryFareClassOverrideModel"
            }
          },
          "purchaseConditions": {
            "$ref": "#/components/schemas/AncillaryPurchaseConditionsModel"
          },
          "inventoryCriteria": {
            "$ref": "#/components/schemas/AncillaryInventoryCriteriaModel"
          },
          "serviceRequest": {
            "$ref": "#/components/schemas/ServiceRequestModel"
          },
          "serviceRequestNote": {
            "type": "string"
          },
          "translations": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AncillaryTranslationModel"
            }
          },
          "requestedTranslation": {
            "$ref": "#/components/schemas/AncillaryTranslationModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "AncillaryCategoryModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "index": {
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "ancillaryType": {
            "$ref": "#/components/schemas/AncillaryTypeModel"
          },
          "purchaseConditions": {
            "$ref": "#/components/schemas/AncillaryPurchaseConditionsModel"
          },
          "translations": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AncillaryTranslationModel"
            }
          },
          "requestedTranslation": {
            "$ref": "#/components/schemas/AncillaryTranslationModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "AncillaryTypeModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "AncillaryPurchaseConditionsModel": {
        "type": "object",
        "properties": {
          "allowMultipleItems": {
            "type": "boolean"
          },
          "priorDepartureLockMinutes": {
            "format": "int32",
            "type": "integer"
          },
          "maximumPerPassengerCount": {
            "format": "int32",
            "type": "integer"
          },
          "enforcedDuringBooking": {
            "type": "boolean"
          },
          "specifyDate": {
            "type": "boolean"
          }
        }
      },
      "AncillaryTranslationModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "language": {
            "$ref": "#/components/schemas/LanguageModel"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "AncillaryOptionTypeModel": {
        "type": "object",
        "properties": {
          "airportOption": {
            "type": "boolean"
          },
          "cityPairOption": {
            "type": "boolean"
          },
          "flightOption": {
            "type": "boolean"
          }
        }
      },
      "AncillaryFareClassOverrideModel": {
        "type": "object",
        "properties": {
          "fareClass": {
            "$ref": "#/components/schemas/FareClassModel"
          },
          "purchaseApplicability": {
            "$ref": "#/components/schemas/AncillaryPurchaseApplicabilityModel"
          },
          "chargeAmount": {
            "$ref": "#/components/schemas/CurrencyAmountModel"
          },
          "chargeOverrides": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeOverrideModel"
            }
          }
        }
      },
      "AncillaryPurchaseApplicabilityModel": {
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean"
          },
          "package": {
            "type": "boolean"
          },
          "unavailable": {
            "type": "boolean"
          }
        }
      },
      "AncillaryInventoryCriteriaModel": {
        "type": "object",
        "properties": {
          "managed": {
            "type": "boolean"
          },
          "bufferNotification": {
            "$ref": "#/components/schemas/AncillaryBufferNotificationModel"
          }
        }
      },
      "AncillaryBufferNotificationModel": {
        "type": "object",
        "properties": {
          "availableCount": {
            "format": "int32",
            "type": "integer"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ContactInfoModel"
          }
        }
      },
      "AncillaryRedemptionModel": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/AncillaryRedemptionStatusModel"
          }
        }
      },
      "AncillaryRedemptionStatusModel": {
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean"
          },
          "redeemed": {
            "type": "boolean"
          }
        }
      },
      "ReservationPaymentTransactionModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "paymentTime": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethodModel"
          },
          "paymentMethodCriteria": {
            "$ref": "#/components/schemas/PaymentMethodCriteriaModel"
          },
          "currencyAmounts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmountModel"
            }
          },
          "processingCurrencyAmounts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "payerDescription": {
            "type": "string",
            "nullable": true
          },
          "receiptNumber": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "allPassengers": {
            "type": "boolean"
          },
          "payments": {
            "uniqueItems": false,
            "nullable": true,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "refundTransactions": {
            "uniqueItems": false,
            "nullable": true,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PaymentMethodModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "identifier": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentMethodTypeModel"
          },
          "receiptRequired": {
            "type": "boolean"
          },
          "ticketRequired": {
            "type": "boolean"
          },
          "processingFee": {
            "$ref": "#/components/schemas/ProcessingFeeModel"
          },
          "saleCode": {
            "type": "string"
          },
          "usageCode": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "required": ["key", "identifier"]
      },
      "PaymentMethodTypeModel": {
        "type": "object",
        "properties": {
          "thirdParty": {
            "type": "boolean"
          },
          "cash": {
            "type": "boolean"
          },
          "cheque": {
            "type": "boolean"
          },
          "creditCard": {
            "type": "boolean"
          },
          "debit": {
            "type": "boolean"
          },
          "moneyOrder": {
            "type": "boolean"
          },
          "onAccount": {
            "type": "boolean"
          },
          "other": {
            "type": "boolean"
          },
          "voucher": {
            "type": "boolean"
          }
        }
      },
      "ProcessingFeeModel": {
        "type": "object",
        "properties": {
          "fixedRate": {
            "$ref": "#/components/schemas/FixedRateProcessingFeeModel"
          },
          "percentageRate": {
            "$ref": "#/components/schemas/PercentageRateProcessingFeeModel"
          }
        }
      },
      "FixedRateProcessingFeeModel": {
        "type": "object",
        "properties": {
          "chargeAmount": {
            "$ref": "#/components/schemas/CurrencyAmountModel"
          },
          "chargeOverrides": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeOverrideModel"
            }
          },
          "bookingApplicability": {
            "$ref": "#/components/schemas/FixedRateBookingApplicablityModel"
          },
          "feeApplicability": {
            "$ref": "#/components/schemas/FixedRateFeeApplicabilityModel"
          }
        }
      },
      "FixedRateBookingApplicablityModel": {
        "type": "object",
        "properties": {
          "perPassenger": {
            "type": "boolean"
          },
          "perJourney": {
            "type": "boolean"
          }
        }
      },
      "FixedRateFeeApplicabilityModel": {
        "type": "object",
        "properties": {
          "noExistingFee": {
            "type": "boolean"
          },
          "noExistingPayment": {
            "type": "boolean"
          }
        }
      },
      "PercentageRateProcessingFeeModel": {
        "type": "object",
        "properties": {
          "percentage": {
            "format": "double",
            "type": "number"
          },
          "minimumCurrencyAmounts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmountModel"
            }
          },
          "maximumCurrencyAmounts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmountModel"
            }
          }
        }
      },
      "PaymentMethodCriteriaModel": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/PaymentAccountModel"
          },
          "creditCard": {
            "$ref": "#/components/schemas/PaymentCreditCardModel"
          },
          "thirdParty": {
            "$ref": "#/components/schemas/PaymentThirdPartyModel"
          },
          "voucher": {
            "$ref": "#/components/schemas/PaymentVoucherModel"
          }
        }
      },
      "PaymentAccountModel": {
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/CompanyModel"
          },
          "purchaseOrder": {
            "type": "string"
          }
        }
      },
      "PaymentCreditCardModel": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string"
          },
          "expiryMonth": {
            "format": "int32",
            "type": "integer"
          },
          "expiryYear": {
            "format": "int32",
            "type": "integer"
          },
          "verificationNumber": {
            "format": "int32",
            "type": "integer"
          },
          "cardHolder": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "paymentMonths": {
            "format": "int32",
            "type": "integer"
          },
          "billing": {
            "$ref": "#/components/schemas/CreditCardBillingShippingModel"
          },
          "shipping": {
            "$ref": "#/components/schemas/CreditCardBillingShippingModel"
          },
          "clientIP": {
            "type": "string"
          },
          "transaction": {
            "$ref": "#/components/schemas/CreditCardTransactionModel"
          },
          "redirect": {
            "$ref": "#/components/schemas/RedirectPaymentModel"
          }
        }
      },
      "CreditCardBillingShippingModel": {
        "type": "object",
        "properties": {
          "contactInformation": {
            "$ref": "#/components/schemas/ContactInfoModel"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          }
        }
      },
      "CreditCardTransactionModel": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "authorization": {
            "type": "string"
          }
        }
      },
      "RedirectPaymentModel": {
        "type": "object",
        "properties": {
          "providerPostParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "applicationIdentifier": {
            "type": "string"
          },
          "language": {
            "$ref": "#/components/schemas/LanguageModel"
          }
        }
      },
      "PaymentThirdPartyModel": {
        "type": "object",
        "properties": {
          "clientIP": {
            "type": "string"
          },
          "language": {
            "$ref": "#/components/schemas/LanguageModel"
          },
          "applicationIdentifier": {
            "type": "string"
          },
          "redirectURL": {
            "type": "string"
          },
          "postURL": {
            "type": "string"
          },
          "postData": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          }
        }
      },
      "PaymentVoucherModel": {
        "type": "object",
        "properties": {
          "serialNumber": {
            "type": "string"
          },
          "personalIdentificationNumber": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "redemptionAmount": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "ReservationPaymentModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "currencyAmounts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmountModel"
            }
          },
          "passenger": {
            "$ref": "#/components/schemas/ReservationPassengerModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ReservationPaymentRefundTransactionModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "refundTime": {
            "type": "string"
          },
          "currencyAmounts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmountModel"
            }
          },
          "refunds": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationPaymentRefundModel"
            }
          }
        }
      },
      "ReservationPaymentRefundModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "payment": {
            "$ref": "#/components/schemas/ReservationPaymentModel"
          },
          "currencyAmounts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmountModel"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ReservationSeatSelectionModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "selectionKey": {
            "type": "string"
          },
          "passenger": {
            "$ref": "#/components/schemas/ReservationPassengerModel"
          },
          "journey": {
            "$ref": "#/components/schemas/ReservationJourneyModel"
          },
          "segment": {
            "$ref": "#/components/schemas/JourneySegmentModel"
          },
          "seatMapCell": {
            "$ref": "#/components/schemas/SeatMapCellModel"
          },
          "reservationStatus": {
            "$ref": "#/components/schemas/ReservationStatusModel"
          },
          "paymentTransactions": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationPaymentTransactionModel"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ReservationModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "number": {
            "format": "int32",
            "type": "integer"
          },
          "locator": {
            "type": "string"
          },
          "bookingInformation": {
            "$ref": "#/components/schemas/BookingInfoModel"
          },
          "reservationSummary": {
            "type": "object"
          },
          "passengers": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationPassengerModel"
            }
          },
          "journeys": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationJourneyModel"
            }
          },
          "insurancePolicies": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "ancillaryPurchases": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "seatSelections": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "passengerLegDetails": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "charges": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "paymentTransactions": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationPaymentTransactionModel"
            }
          },
          "eTickets": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "InsurancePolicyRequestModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "number": {
            "format": "int32",
            "type": "integer"
          },
          "locator": {
            "type": "string"
          },
          "bookingInformation": {
            "$ref": "#/components/schemas/BookingInfoModel"
          },
          "reservationSummary": {
            "type": "object"
          },
          "passengers": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "journeys": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "insurancePolicies": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "ancillaryPurchases": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "seatSelections": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "passengerLegDetails": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "charges": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "paymentTransactions": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "eTickets": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "BookingInfoModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "sessionIdentifier": {
            "type": "string"
          },
          "distributionChannel": {
            "type": "object"
          },
          "externalLocators": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "agency": {
            "$ref": "#/components/schemas/AgencyModel"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyModel"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyModel"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/BookingContactInfoModel"
          },
          "creation": {
            "type": "object"
          },
          "hold": {
            "$ref": "#/components/schemas/BookingHoldModel"
          },
          "cancellation": {
            "type": "object"
          },
          "bookingType": {
            "type": "object"
          },
          "frequentFlyer": {
            "type": "object"
          },
          "notes": {
            "type": "string"
          },
          "paymentTransactions": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "BookingContactInfoModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "phoneNumber": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "faxNumber": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          }
        },
        "required": ["name", "phoneNumber", "email"]
      },
      "ExternalLocatorModel": {
        "type": "object",
        "properties": {
          "locator": {
            "type": "string"
          }
        }
      },
      "BookingCreationModel": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string"
          }
        }
      },
      "BookingHoldModel": {
        "type": "object",
        "properties": {
          "overridden": {
            "type": "boolean"
          },
          "expiryTime": {
            "type": "string"
          }
        }
      },
      "BookingCancellationModel": {
        "type": "object",
        "properties": {
          "number": {
            "format": "int32",
            "type": "integer"
          },
          "time": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserModel"
          }
        }
      },
      "UserModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "userLogonName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "employee": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "password": {
            "type": "string"
          },
          "passwordExpiryDate": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ContactInfoModel"
          },
          "notes": {
            "type": "string"
          },
          "agency": {
            "$ref": "#/components/schemas/AgencyModel"
          },
          "timeDisplayPreference": {
            "$ref": "#/components/schemas/UserTimePrefModel"
          },
          "closestAirport": {
            "$ref": "#/components/schemas/AirportModel"
          },
          "protected": {
            "type": "boolean"
          },
          "airlineCode": {
            "$ref": "#/components/schemas/AirlineCodeModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "UserTimePrefModel": {
        "type": "object",
        "properties": {
          "utc": {
            "type": "boolean"
          },
          "closestAirport": {
            "type": "boolean"
          }
        }
      },
      "BookingTypeModel": {
        "type": "object",
        "properties": {
          "eticketed": {
            "type": "boolean"
          },
          "groupReserved": {
            "type": "boolean"
          },
          "frequentFlyerRedeemed": {
            "type": "boolean"
          }
        }
      },
      "PassengerResSummaryModel": {
        "type": "object",
        "properties": {
          "passenger": {
            "$ref": "#/components/schemas/ReservationPassengerModel"
          },
          "charges": {
            "$ref": "#/components/schemas/CurrencyAmountModel"
          },
          "payments": {
            "$ref": "#/components/schemas/CurrencyAmountModel"
          },
          "refunds": {
            "$ref": "#/components/schemas/CurrencyAmountModel"
          },
          "itinerary": {
            "type": "string"
          }
        }
      },
      "ReservationPassengerLegDetailModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "passenger": {
            "$ref": "#/components/schemas/ReservationPassengerModel"
          },
          "journey": {
            "$ref": "#/components/schemas/ReservationJourneyModel"
          },
          "segment": {
            "$ref": "#/components/schemas/JourneySegmentModel"
          },
          "leg": {
            "$ref": "#/components/schemas/JourneyLegModel"
          },
          "reservationStatus": {
            "$ref": "#/components/schemas/ReservationStatusModel"
          },
          "travelStatus": {
            "$ref": "#/components/schemas/TravelStatusModel"
          },
          "boardingSequenceNumber": {
            "type": "string"
          },
          "thru": {
            "type": "boolean"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "TravelStatusModel": {
        "type": "object",
        "properties": {
          "notCheckedIn": {
            "type": "boolean"
          },
          "checkedIn": {
            "type": "boolean"
          },
          "boarded": {
            "type": "boolean"
          },
          "noshow": {
            "type": "boolean"
          }
        }
      },
      "ReservationChargeModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "passenger": {
            "$ref": "#/components/schemas/ReservationPassengerModel"
          },
          "journey": {
            "$ref": "#/components/schemas/ReservationJourneyModel"
          },
          "chargeTime": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "chargeType": {
            "$ref": "#/components/schemas/ChargeTypeModel"
          },
          "surcharge": {
            "$ref": "#/components/schemas/SurchargeModel"
          },
          "currencyAmounts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmountModel"
            }
          },
          "taxConfiguration": {
            "$ref": "#/components/schemas/TaxConfigurationModel"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "discount": {
            "$ref": "#/components/schemas/DiscountModel"
          },
          "refundable": {
            "type": "boolean"
          },
          "privateFares": {
            "type": "boolean"
          },
          "notes": {
            "type": "string"
          },
          "paymentTransactions": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationPaymentTransactionModel"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "SurchargeModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "chargeAmount": {
            "$ref": "#/components/schemas/CurrencyAmountModel"
          },
          "chargeType": {
            "$ref": "#/components/schemas/ChargeTypeModel"
          },
          "specifiedTaxConfiguration": {
            "$ref": "#/components/schemas/TaxConfigurationOverrideModel"
          },
          "usage": {
            "$ref": "#/components/schemas/ChargeBookingApplicabilityModel"
          },
          "passengerApplicability": {
            "$ref": "#/components/schemas/ChargePassengerApplicabilityModel"
          },
          "refundable": {
            "type": "boolean"
          },
          "distributionChannels": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DistributionChannelModel"
            }
          },
          "index": {
            "format": "int32",
            "type": "integer"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ChargeBookingApplicabilityModel": {
        "type": "object",
        "properties": {
          "manual": {
            "type": "boolean"
          },
          "perReservation": {
            "type": "boolean"
          },
          "perJourney": {
            "type": "boolean"
          },
          "perPassenger": {
            "type": "boolean"
          }
        }
      },
      "DiscountModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "ReservationETicketModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "external": {
            "type": "boolean"
          },
          "passenger": {
            "$ref": "#/components/schemas/ReservationPassengerModel"
          },
          "journey": {
            "$ref": "#/components/schemas/ReservationJourneyModel"
          },
          "segment": {
            "$ref": "#/components/schemas/JourneySegmentModel"
          },
          "number": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StatusModel"
          },
          "assignment": {
            "type": "string"
          },
          "infant": {
            "$ref": "#/components/schemas/ReservationPassengerInfantModel"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "EmailItineraryModel": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string"
          },
          "emailAddresses": {
            "type": "string"
          }
        }
      },
      "LoginModels": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "UserSessionModel": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "UnauthorizedModel": {
        "type": "object",
        "properties": {
          "invalidCredentials": {
            "type": "string",
            "description": "Invalid Credentials - Occurs when the api username and/or password are not valid for the endpoint you are trying to reach"
          }
        }
      },
      "AncillaryOptionsModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "purchaseKey": {
            "type": "string"
          },
          "ancillaryItem": {
            "$ref": "#/components/schemas/AncillaryItemModel"
          },
          "requirementLocation": {
            "$ref": "#/components/schemas/RequirementLocationModel"
          },
          "availability": {
            "format": "int32",
            "type": "integer"
          },
          "purchaseApplicability": {
            "$ref": "#/components/schemas/AncillaryPurchaseApplicabilityModel"
          },
          "ancillaryCharges": {
            "$ref": "#/components/schemas/AncillaryChargesModel"
          }
        }
      },
      "RequirementLocationModel": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "airport": {
            "$ref": "#/components/schemas/AirportModel"
          },
          "cityPair": {
            "$ref": "#/components/schemas/CityPairModel"
          },
          "flight": {
            "$ref": "#/components/schemas/FlightModel"
          }
        }
      },
      "AncillaryChargesModel": {
        "type": "object",
        "properties": {
          "description": {
            "type": "object"
          },
          "chargeType": {
            "$ref": "#/components/schemas/ChargeTypeModel"
          },
          "currencyAmounts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmountModel"
            }
          },
          "taxConfiguration": {
            "$ref": "#/components/schemas/TaxConfigurationModel"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    },
    {
      "api-key": []
    }
  ]
}
